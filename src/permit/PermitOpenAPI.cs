//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using PermitSDK.OpenAPI.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace PermitSDK.OpenAPI
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermitClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PermitClient(string baseUrl, System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get All Data Optimized
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual FullData Get_all_data_optimized(System.Guid org_id, string proj_id, string env_id, int? x_Shard_ID = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_all_data_optimizedAsync(org_id, proj_id, env_id, x_Shard_ID, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Data Optimized
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FullData> Get_all_data_optimizedAsync(System.Guid org_id, string proj_id, string env_id, int? x_Shard_ID = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Shard_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Shard-ID", ConvertToString(x_Shard_ID, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/optimized"
                    urlBuilder_.Append("v2/internal/opal_data/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/optimized");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FullData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All Data
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual FullData Get_all_data(System.Guid org_id, string proj_id, string env_id, int? x_Shard_ID = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_all_dataAsync(org_id, proj_id, env_id, x_Shard_ID, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Data
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FullData> Get_all_dataAsync(System.Guid org_id, string proj_id, string env_id, int? x_Shard_ID = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Shard_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Shard-ID", ConvertToString(x_Shard_ID, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/internal/opal_data/{org_id}/{proj_id}/{env_id}"
                    urlBuilder_.Append("v2/internal/opal_data/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FullData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All Users Data
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.IDictionary<string, UserData> Get_all_users_data(System.Guid org_id, string proj_id, string env_id, int? x_Shard_ID = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_all_users_dataAsync(org_id, proj_id, env_id, x_Shard_ID, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Users Data
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, UserData>> Get_all_users_dataAsync(System.Guid org_id, string proj_id, string env_id, int? x_Shard_ID = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Shard_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Shard-ID", ConvertToString(x_Shard_ID, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/users"
                    urlBuilder_.Append("v2/internal/opal_data/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, UserData>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All Role Assignments Data
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>> Get_all_role_assignments_data(System.Guid org_id, string proj_id, string env_id, int? x_Shard_ID = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_all_role_assignments_dataAsync(org_id, proj_id, env_id, x_Shard_ID, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Role Assignments Data
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>>> Get_all_role_assignments_dataAsync(System.Guid org_id, string proj_id, string env_id, int? x_Shard_ID = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Shard_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Shard-ID", ConvertToString(x_Shard_ID, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/role_assignments"
                    urlBuilder_.Append("v2/internal/opal_data/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role_assignments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All Resource Instances Data
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.IDictionary<string, ResourceInstanceAttributeData> Get_all_resource_instances_data(System.Guid org_id, string proj_id, string env_id, int? x_Shard_ID = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_all_resource_instances_dataAsync(org_id, proj_id, env_id, x_Shard_ID, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Resource Instances Data
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, ResourceInstanceAttributeData>> Get_all_resource_instances_dataAsync(System.Guid org_id, string proj_id, string env_id, int? x_Shard_ID = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Shard_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Shard-ID", ConvertToString(x_Shard_ID, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/resource_instances"
                    urlBuilder_.Append("v2/internal/opal_data/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resource_instances");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, ResourceInstanceAttributeData>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All Relationships Data
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>>> Get_all_relationships_data(System.Guid org_id, string proj_id, string env_id, int? x_Shard_ID = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_all_relationships_dataAsync(org_id, proj_id, env_id, x_Shard_ID, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Relationships Data
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>>>> Get_all_relationships_dataAsync(System.Guid org_id, string proj_id, string env_id, int? x_Shard_ID = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Shard_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Shard-ID", ConvertToString(x_Shard_ID, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/relationships"
                    urlBuilder_.Append("v2/internal/opal_data/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/relationships");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the authenticated account member
        /// </summary>
        /// <remarks>
        /// Gets the authenticated account member's details.
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OrgMemberReadWithGrants Get_authenticated_member()
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_authenticated_memberAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the authenticated account member
        /// </summary>
        /// <remarks>
        /// Gets the authenticated account member's details.
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrgMemberReadWithGrants> Get_authenticated_memberAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/members/me"
                    urlBuilder_.Append("v2/members/me");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrgMemberReadWithGrants>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Organization Members
        /// </summary>
        /// <remarks>
        /// Lists all the account members that current active account has access to, optionally filtering by project or environment.
        /// <br/>The active account/organization is determined by the API Key used or by the authenticated session id.
        /// </remarks>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<OrgMemberReadWithGrants> List_organization_members(System.Guid? project_id = null, System.Guid? env_id = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_organization_membersAsync(project_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Organization Members
        /// </summary>
        /// <remarks>
        /// Lists all the account members that current active account has access to, optionally filtering by project or environment.
        /// <br/>The active account/organization is determined by the API Key used or by the authenticated session id.
        /// </remarks>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrgMemberReadWithGrants>> List_organization_membersAsync(System.Guid? project_id = null, System.Guid? env_id = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/members"
                    urlBuilder_.Append("v2/members");
                    urlBuilder_.Append('?');
                    if (project_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("project_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(project_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (env_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("env_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OrgMemberReadWithGrants>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Invite new members (EAP)
        /// </summary>
        /// <remarks>
        /// Create an organization member if needed, and grant it permissions.
        /// <br/>
        /// <br/>The member can be specified either by ID (for an existing member), or by email (for either an existing member or a new one).
        /// <br/>
        /// <br/>For a new member, an invite will be sent.
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OrgMemberReadWithGrants Create_organization_members(OrgMemberCreate body, string? inviter_name = null, string? inviter_email = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_organization_membersAsync(body, inviter_name, inviter_email, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Invite new members (EAP)
        /// </summary>
        /// <remarks>
        /// Create an organization member if needed, and grant it permissions.
        /// <br/>
        /// <br/>The member can be specified either by ID (for an existing member), or by email (for either an existing member or a new one).
        /// <br/>
        /// <br/>For a new member, an invite will be sent.
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrgMemberReadWithGrants> Create_organization_membersAsync(OrgMemberCreate body, string? inviter_name = null, string? inviter_email = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/members"
                    urlBuilder_.Append("v2/members");
                    urlBuilder_.Append('?');
                    if (inviter_name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inviter_name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inviter_name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (inviter_email != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inviter_email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inviter_email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrgMemberReadWithGrants>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove permission (EAP)
        /// </summary>
        /// <remarks>
        /// Remove permissions from a member. If the last permissions a member has are removed, the member is also deleted.
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_organization_permissions(OrgMemberRemovePermissions body)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_organization_permissionsAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove permission (EAP)
        /// </summary>
        /// <remarks>
        /// Remove permissions from a member. If the last permissions a member has are removed, the member is also deleted.
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_organization_permissionsAsync(OrgMemberRemovePermissions body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/members"
                    urlBuilder_.Append("v2/members");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Organization Member
        /// </summary>
        /// <remarks>
        /// Gets a single account member by its id or email address. matching the given member,
        /// <br/>if no such member exists under the current active account (organization), returns 404.
        /// </remarks>
        /// <param name="member_id">Either the unique id (UUID) of the account member, or the email address of the account member.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OrgMemberReadWithGrants Get_organization_member(string member_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_organization_memberAsync(member_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Organization Member
        /// </summary>
        /// <remarks>
        /// Gets a single account member by its id or email address. matching the given member,
        /// <br/>if no such member exists under the current active account (organization), returns 404.
        /// </remarks>
        /// <param name="member_id">Either the unique id (UUID) of the account member, or the email address of the account member.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrgMemberReadWithGrants> Get_organization_memberAsync(string member_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (member_id == null)
                throw new System.ArgumentNullException("member_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/members/{member_id}"
                    urlBuilder_.Append("v2/members/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(member_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrgMemberReadWithGrants>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove member (EAP)
        /// </summary>
        /// <remarks>
        /// Deletes an account member matching the given id or email address.
        /// <br/>The member will be removed from the active account in permit.io.
        /// <br/>
        /// <br/>If the member is the only member in its account (organization), returns 400 (bad request),
        /// <br/>due to nobody remains with access to the account, meaning deletion of the entire account (org).
        /// <br/>To completely remove an account, call DELETE `/orgs/{org}`.
        /// </remarks>
        /// <param name="member_id">Either the unique id (UUID) of the account member, or the email address of the account member.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_organization_member(string member_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_organization_memberAsync(member_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove member (EAP)
        /// </summary>
        /// <remarks>
        /// Deletes an account member matching the given id or email address.
        /// <br/>The member will be removed from the active account in permit.io.
        /// <br/>
        /// <br/>If the member is the only member in its account (organization), returns 400 (bad request),
        /// <br/>due to nobody remains with access to the account, meaning deletion of the entire account (org).
        /// <br/>To completely remove an account, call DELETE `/orgs/{org}`.
        /// </remarks>
        /// <param name="member_id">Either the unique id (UUID) of the account member, or the email address of the account member.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_organization_memberAsync(string member_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (member_id == null)
                throw new System.ArgumentNullException("member_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/members/{member_id}"
                    urlBuilder_.Append("v2/members/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(member_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Edit members (EAP)
        /// </summary>
        /// <remarks>
        /// Updates an account member's settings.
        /// </remarks>
        /// <param name="member_id">Either the unique id (UUID) of the account member, or the email address of the account member.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OrgMemberReadWithGrants Update_organization_member(string member_id, OrgMemberUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_organization_memberAsync(member_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit members (EAP)
        /// </summary>
        /// <remarks>
        /// Updates an account member's settings.
        /// </remarks>
        /// <param name="member_id">Either the unique id (UUID) of the account member, or the email address of the account member.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrgMemberReadWithGrants> Update_organization_memberAsync(string member_id, OrgMemberUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (member_id == null)
                throw new System.ArgumentNullException("member_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/members/{member_id}"
                    urlBuilder_.Append("v2/members/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(member_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrgMemberReadWithGrants>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Environment Api Key
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual APIKeyRead Get_environment_api_key(string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_environment_api_keyAsync(proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Environment Api Key
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<APIKeyRead> Get_environment_api_keyAsync(string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/api-key/{proj_id}/{env_id}"
                    urlBuilder_.Append("v2/api-key/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<APIKeyRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Api Key Scope
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual APIKeyScopeRead Get_api_key_scope()
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_api_key_scopeAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Api Key Scope
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<APIKeyScopeRead> Get_api_key_scopeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/api-key/scope"
                    urlBuilder_.Append("v2/api-key/scope");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<APIKeyScopeRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Api Keys
        /// </summary>
        /// <remarks>
        /// Lists all the api_keys under the active organization.
        /// </remarks>
        /// <param name="proj_id">Optional project filter by project id or key</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_APIKeyRead_ List_api_keys(MemberAccessObj? object_type = null, string? proj_id = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_api_keysAsync(object_type, proj_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Api Keys
        /// </summary>
        /// <remarks>
        /// Lists all the api_keys under the active organization.
        /// </remarks>
        /// <param name="proj_id">Optional project filter by project id or key</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_APIKeyRead_> List_api_keysAsync(MemberAccessObj? object_type = null, string? proj_id = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/api-key"
                    urlBuilder_.Append("v2/api-key");
                    urlBuilder_.Append('?');
                    if (object_type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("object_type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(object_type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (proj_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("proj_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_APIKeyRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Api Key
        /// </summary>
        /// <remarks>
        /// Creates a new api_key under the active organization.
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual APIKeyRead Create_api_key(APIKeyCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_api_keyAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Api Key
        /// </summary>
        /// <remarks>
        /// Creates a new api_key under the active organization.
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<APIKeyRead> Create_api_keyAsync(APIKeyCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/api-key"
                    urlBuilder_.Append("v2/api-key");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<APIKeyRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Api Key
        /// </summary>
        /// <remarks>
        /// Gets a single api_key matching the given api_key_id, if such api_key exists.
        /// </remarks>
        /// <param name="api_key_id">The unique id of the API key</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual APIKeyRead Get_api_key(string api_key_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_api_keyAsync(api_key_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Api Key
        /// </summary>
        /// <remarks>
        /// Gets a single api_key matching the given api_key_id, if such api_key exists.
        /// </remarks>
        /// <param name="api_key_id">The unique id of the API key</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<APIKeyRead> Get_api_keyAsync(string api_key_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_key_id == null)
                throw new System.ArgumentNullException("api_key_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/api-key/{api_key_id}"
                    urlBuilder_.Append("v2/api-key/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(api_key_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<APIKeyRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Api Key
        /// </summary>
        /// <remarks>
        /// Deletes the api_key and all its related data.
        /// </remarks>
        /// <param name="api_key_id">The unique id of the API key</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_api_key(string api_key_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_api_keyAsync(api_key_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Api Key
        /// </summary>
        /// <remarks>
        /// Deletes the api_key and all its related data.
        /// </remarks>
        /// <param name="api_key_id">The unique id of the API key</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_api_keyAsync(string api_key_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_key_id == null)
                throw new System.ArgumentNullException("api_key_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/api-key/{api_key_id}"
                    urlBuilder_.Append("v2/api-key/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(api_key_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Rotate API Key
        /// </summary>
        /// <remarks>
        /// Rotates the API key of the PDP container with id `pdp_id`.
        /// <br/>
        /// <br/>The rotation of the API key revokes the old API key and issues a new API key to the PDP.
        /// </remarks>
        /// <param name="api_key_id">The unique id of the API key</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual APIKeyRead Rotate_api_key(System.Guid api_key_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Rotate_api_keyAsync(api_key_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Rotate API Key
        /// </summary>
        /// <remarks>
        /// Rotates the API key of the PDP container with id `pdp_id`.
        /// <br/>
        /// <br/>The rotation of the API key revokes the old API key and issues a new API key to the PDP.
        /// </remarks>
        /// <param name="api_key_id">The unique id of the API key</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<APIKeyRead> Rotate_api_keyAsync(System.Guid api_key_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_key_id == null)
                throw new System.ArgumentNullException("api_key_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/api-key/{api_key_id}/rotate-secret"
                    urlBuilder_.Append("v2/api-key/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(api_key_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/rotate-secret");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<APIKeyRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Organizations
        /// </summary>
        /// <remarks>
        /// Lists all the organizations that can be accessed by the
        /// <br/>authenticated actor (i.e: human team member or api key).
        /// </remarks>
        /// <param name="search">Text search for the org name or key</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<OrganizationRead> List_organizations(string? search = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_organizationsAsync(search, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Organizations
        /// </summary>
        /// <remarks>
        /// Lists all the organizations that can be accessed by the
        /// <br/>authenticated actor (i.e: human team member or api key).
        /// </remarks>
        /// <param name="search">Text search for the org name or key</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganizationRead>> List_organizationsAsync(string? search = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/orgs"
                    urlBuilder_.Append("v2/orgs");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OrganizationRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Organization
        /// </summary>
        /// <remarks>
        /// If you want to create org via API, reach out to us and we will add the permission to your API token
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OrganizationReadWithAPIKey Create_organization(OrganizationCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_organizationAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Organization
        /// </summary>
        /// <remarks>
        /// If you want to create org via API, reach out to us and we will add the permission to your API token
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrganizationReadWithAPIKey> Create_organizationAsync(OrganizationCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/orgs"
                    urlBuilder_.Append("v2/orgs");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrganizationReadWithAPIKey>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Organization
        /// </summary>
        /// <remarks>
        /// Gets a single organization (Permit.io account) matching the given org_id,
        /// <br/>if such org exists and can be accessed by the authenticated actor.
        /// </remarks>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OrganizationRead Get_organization(string org_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_organizationAsync(org_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Organization
        /// </summary>
        /// <remarks>
        /// Gets a single organization (Permit.io account) matching the given org_id,
        /// <br/>if such org exists and can be accessed by the authenticated actor.
        /// </remarks>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrganizationRead> Get_organizationAsync(string org_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/orgs/{org_id}"
                    urlBuilder_.Append("v2/orgs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrganizationRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Organization
        /// </summary>
        /// <remarks>
        /// Deletes an organization (Permit.io account) and all its related data.
        /// </remarks>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_organization(string org_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_organizationAsync(org_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Organization
        /// </summary>
        /// <remarks>
        /// Deletes an organization (Permit.io account) and all its related data.
        /// </remarks>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_organizationAsync(string org_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/orgs/{org_id}"
                    urlBuilder_.Append("v2/orgs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Organization
        /// </summary>
        /// <remarks>
        /// Updates the organization's profile.
        /// </remarks>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OrganizationRead Update_organization(string org_id, OrganizationUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_organizationAsync(org_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Organization
        /// </summary>
        /// <remarks>
        /// Updates the organization's profile.
        /// </remarks>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrganizationRead> Update_organizationAsync(string org_id, OrganizationUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/orgs/{org_id}"
                    urlBuilder_.Append("v2/orgs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrganizationRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Active Organization
        /// </summary>
        /// <remarks>
        /// Gets a single organization (Permit.io account) matching the given org_id,
        /// <br/>if such org exists and can be accessed by the authenticated actor.
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OrganizationRead Get_active_organization()
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_active_organizationAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Active Organization
        /// </summary>
        /// <remarks>
        /// Gets a single organization (Permit.io account) matching the given org_id,
        /// <br/>if such org exists and can be accessed by the authenticated actor.
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrganizationRead> Get_active_organizationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/orgs/active/org"
                    urlBuilder_.Append("v2/orgs/active/org");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrganizationRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stats Organization
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OrganizationStats Stats_organization(string org_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Stats_organizationAsync(org_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stats Organization
        /// </summary>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrganizationStats> Stats_organizationAsync(string org_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/orgs/{org_id}/stats"
                    urlBuilder_.Append("v2/orgs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/stats");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrganizationStats>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Organization Invites
        /// </summary>
        /// <remarks>
        /// Lists pending organization invites
        /// </remarks>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<InviteRead> List_organization_invites(string org_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_organization_invitesAsync(org_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Organization Invites
        /// </summary>
        /// <remarks>
        /// Lists pending organization invites
        /// </remarks>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InviteRead>> List_organization_invitesAsync(string org_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/orgs/{org_id}/invites"
                    urlBuilder_.Append("v2/orgs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invites");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InviteRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Invite Members To Organization
        /// </summary>
        /// <remarks>
        /// Invite new members into the organization.
        /// </remarks>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual MultiInviteResult Invite_members_to_organization(string org_id, System.Collections.Generic.IEnumerable<InviteCreate> body, string? inviter_name = null, string? inviter_email = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Invite_members_to_organizationAsync(org_id, body, inviter_name, inviter_email, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Invite Members To Organization
        /// </summary>
        /// <remarks>
        /// Invite new members into the organization.
        /// </remarks>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MultiInviteResult> Invite_members_to_organizationAsync(string org_id, System.Collections.Generic.IEnumerable<InviteCreate> body, string? inviter_name = null, string? inviter_email = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/orgs/{org_id}/invites"
                    urlBuilder_.Append("v2/orgs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invites");
                    urlBuilder_.Append('?');
                    if (inviter_name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inviter_name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inviter_name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (inviter_email != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inviter_email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inviter_email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MultiInviteResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel Invite
        /// </summary>
        /// <remarks>
        /// Cancels an invite that was sent to a new member.
        /// </remarks>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="invite_id">Id of the invite to cancel</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Cancel_invite(string org_id, System.Guid invite_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Cancel_inviteAsync(org_id, invite_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel Invite
        /// </summary>
        /// <remarks>
        /// Cancels an invite that was sent to a new member.
        /// </remarks>
        /// <param name="org_id">Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").</param>
        /// <param name="invite_id">Id of the invite to cancel</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Cancel_inviteAsync(string org_id, System.Guid invite_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (org_id == null)
                throw new System.ArgumentNullException("org_id");

            if (invite_id == null)
                throw new System.ArgumentNullException("invite_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/orgs/{org_id}/invites/{invite_id}"
                    urlBuilder_.Append("v2/orgs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(org_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invites/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(invite_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Projects
        /// </summary>
        /// <remarks>
        /// Lists all the projects under the active organization.
        /// </remarks>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ProjectRead> List_projects(int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_projectsAsync(page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Projects
        /// </summary>
        /// <remarks>
        /// Lists all the projects under the active organization.
        /// </remarks>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectRead>> List_projectsAsync(int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects"
                    urlBuilder_.Append("v2/projects");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProjectRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Project
        /// </summary>
        /// <remarks>
        /// Creates a new project under the active organization.
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ProjectRead Create_project(ProjectCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_projectAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Project
        /// </summary>
        /// <remarks>
        /// Creates a new project under the active organization.
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectRead> Create_projectAsync(ProjectCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects"
                    urlBuilder_.Append("v2/projects");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Project
        /// </summary>
        /// <remarks>
        /// Gets a single project matching the given proj_id, if such project exists.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ProjectRead Get_project(string proj_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_projectAsync(proj_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Project
        /// </summary>
        /// <remarks>
        /// Gets a single project matching the given proj_id, if such project exists.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectRead> Get_projectAsync(string proj_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Project
        /// </summary>
        /// <remarks>
        /// Deletes the project and all its related data.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_project(string proj_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_projectAsync(proj_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Project
        /// </summary>
        /// <remarks>
        /// Deletes the project and all its related data.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_projectAsync(string proj_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Project
        /// </summary>
        /// <remarks>
        /// Updates the project.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ProjectRead Update_project(string proj_id, ProjectUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_projectAsync(proj_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Project
        /// </summary>
        /// <remarks>
        /// Updates the project.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectRead> Update_projectAsync(string proj_id, ProjectUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stats Environments
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual EnvironmentStats Stats_environments(string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Stats_environmentsAsync(proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stats Environments
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EnvironmentStats> Stats_environmentsAsync(string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/envs/{env_id}/stats"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/envs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/stats");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnvironmentStats>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Environments
        /// </summary>
        /// <remarks>
        /// Lists all the environments under a given project.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<EnvironmentReadWithEmailConfig> List_environments(string proj_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_environmentsAsync(proj_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Environments
        /// </summary>
        /// <remarks>
        /// Lists all the environments under a given project.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EnvironmentReadWithEmailConfig>> List_environmentsAsync(string proj_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/envs"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/envs");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EnvironmentReadWithEmailConfig>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Environment
        /// </summary>
        /// <remarks>
        /// Creates a new environment under a given project.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual EnvironmentRead Create_environment(string proj_id, EnvironmentCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_environmentAsync(proj_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Environment
        /// </summary>
        /// <remarks>
        /// Creates a new environment under a given project.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EnvironmentRead> Create_environmentAsync(string proj_id, EnvironmentCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/envs"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/envs");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnvironmentRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Environment
        /// </summary>
        /// <remarks>
        /// Gets a single environment matching the given env_id, if such environment exists.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual EnvironmentReadWithEmailConfig Get_environment(string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_environmentAsync(proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Environment
        /// </summary>
        /// <remarks>
        /// Gets a single environment matching the given env_id, if such environment exists.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EnvironmentReadWithEmailConfig> Get_environmentAsync(string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/envs/{env_id}"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/envs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnvironmentReadWithEmailConfig>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Environment
        /// </summary>
        /// <remarks>
        /// Deletes an environment and all its related data.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_environment(string proj_id, string env_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_environmentAsync(proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Environment
        /// </summary>
        /// <remarks>
        /// Deletes an environment and all its related data.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_environmentAsync(string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/envs/{env_id}"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/envs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Environment
        /// </summary>
        /// <remarks>
        /// Updates the environment.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual EnvironmentRead Update_environment(string proj_id, string env_id, EnvironmentUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_environmentAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Environment
        /// </summary>
        /// <remarks>
        /// Updates the environment.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EnvironmentRead> Update_environmentAsync(string proj_id, string env_id, EnvironmentUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/envs/{env_id}"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/envs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnvironmentRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Copy Environment
        /// </summary>
        /// <remarks>
        /// Copy environment
        /// <br/>
        /// <br/>This endpoint either duplicates an existing environment to a new environment
        /// <br/>in the same project, or copies from an existing environment to another
        /// <br/>existing environment.
        /// <br/>
        /// <br/>The `scope` object controls which objects will be copied to the target
        /// <br/>environment.
        /// <br/>
        /// <br/>To clone to a new environment, the user must have write permissions
        /// <br/>to the containing project. To clone into an existing environment,
        /// <br/>the user must have write permissions to the target environment.
        /// <br/>
        /// <br/>Copying environments across projects or organizations is not
        /// <br/>allowed.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual EnvironmentRead Copy_environment(string proj_id, string env_id, EnvironmentCopy body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Copy_environmentAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Copy Environment
        /// </summary>
        /// <remarks>
        /// Copy environment
        /// <br/>
        /// <br/>This endpoint either duplicates an existing environment to a new environment
        /// <br/>in the same project, or copies from an existing environment to another
        /// <br/>existing environment.
        /// <br/>
        /// <br/>The `scope` object controls which objects will be copied to the target
        /// <br/>environment.
        /// <br/>
        /// <br/>To clone to a new environment, the user must have write permissions
        /// <br/>to the containing project. To clone into an existing environment,
        /// <br/>the user must have write permissions to the target environment.
        /// <br/>
        /// <br/>Copying environments across projects or organizations is not
        /// <br/>allowed.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EnvironmentRead> Copy_environmentAsync(string proj_id, string env_id, EnvironmentCopy body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/envs/{env_id}/copy"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/envs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/copy");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnvironmentRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Copy Environment Async (EAP)
        /// </summary>
        /// <remarks>
        /// Copy environment
        /// <br/>
        /// <br/>This endpoint either duplicates an existing environment to a new environment
        /// <br/>in the same project, or copies from an existing environment to another
        /// <br/>existing environment.
        /// <br/>
        /// <br/>The `scope` object controls which objects will be copied to the target
        /// <br/>environment.
        /// <br/>
        /// <br/>To clone to a new environment, the user must have write permissions
        /// <br/>to the containing project. To clone into an existing environment,
        /// <br/>the user must have write permissions to the target environment.
        /// <br/>
        /// <br/>Copying environments across projects or organizations is not
        /// <br/>allowed.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="wait">Time in seconds to wait for the task to complete. Default is 0, means no wait.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual TaskResult_EnvironmentRead_ Copy_environment_async(string proj_id, string env_id, EnvironmentCopy body, double? wait = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Copy_environment_asyncAsync(proj_id, env_id, body, wait, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Copy Environment Async (EAP)
        /// </summary>
        /// <remarks>
        /// Copy environment
        /// <br/>
        /// <br/>This endpoint either duplicates an existing environment to a new environment
        /// <br/>in the same project, or copies from an existing environment to another
        /// <br/>existing environment.
        /// <br/>
        /// <br/>The `scope` object controls which objects will be copied to the target
        /// <br/>environment.
        /// <br/>
        /// <br/>To clone to a new environment, the user must have write permissions
        /// <br/>to the containing project. To clone into an existing environment,
        /// <br/>the user must have write permissions to the target environment.
        /// <br/>
        /// <br/>Copying environments across projects or organizations is not
        /// <br/>allowed.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="wait">Time in seconds to wait for the task to complete. Default is 0, means no wait.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TaskResult_EnvironmentRead_> Copy_environment_asyncAsync(string proj_id, string env_id, EnvironmentCopy body, double? wait = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/envs/{env_id}/copy/async"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/envs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/copy/async");
                    urlBuilder_.Append('?');
                    if (wait != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("wait")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(wait, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TaskResult_EnvironmentRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Copy Environment Task Result (EAP)
        /// </summary>
        /// <remarks>
        /// Get the result of a copy environment task.
        /// </remarks>
        /// <param name="task_id">The unique id of the task.</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="wait">Time in seconds to wait for the task to complete. Default is 0, means no wait.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual TaskResult_EnvironmentRead_ Get_copy_environment_async_result(string task_id, string proj_id, string env_id, double? wait = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_copy_environment_async_resultAsync(task_id, proj_id, env_id, wait, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Copy Environment Task Result (EAP)
        /// </summary>
        /// <remarks>
        /// Get the result of a copy environment task.
        /// </remarks>
        /// <param name="task_id">The unique id of the task.</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="wait">Time in seconds to wait for the task to complete. Default is 0, means no wait.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TaskResult_EnvironmentRead_> Get_copy_environment_async_resultAsync(string task_id, string proj_id, string env_id, double? wait = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (task_id == null)
                throw new System.ArgumentNullException("task_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/envs/{env_id}/copy/async/{task_id}/result"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/envs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/copy/async/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(task_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/result");
                    urlBuilder_.Append('?');
                    if (wait != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("wait")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(wait, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TaskResult_EnvironmentRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Test Jwks By Url
        /// </summary>
        /// <remarks>
        /// Test Jwks Url.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="url">URL of JWKs to test</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual object Test_jwks_by_url(string proj_id, string env_id, string? url = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Test_jwks_by_urlAsync(proj_id, env_id, url, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Test Jwks By Url
        /// </summary>
        /// <remarks>
        /// Test Jwks Url.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="url">URL of JWKs to test</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Test_jwks_by_urlAsync(string proj_id, string env_id, string? url = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/envs/{env_id}/test_jwks"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/envs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/test_jwks");
                    urlBuilder_.Append('?');
                    if (url != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("url")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(url, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Bulk Create Or Replace Roles
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleCreateBulkOperationResult Bulk_create_or_replace_roles(string proj_id, string env_id, RoleCreateBulkOperation body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Bulk_create_or_replace_rolesAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk Create Or Replace Roles
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleCreateBulkOperationResult> Bulk_create_or_replace_rolesAsync(string proj_id, string env_id, RoleCreateBulkOperation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/bulk/roles"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/bulk/roles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleCreateBulkOperationResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Condition Sets
        /// </summary>
        /// <remarks>
        /// Lists all condition sets matching a filter.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="search">Text search for the condition sets name or key</param>
        /// <param name="type">if provided, will return only the condition sets of the specified type. e.g: only user sets.</param>
        /// <param name="include_total_count">Include total count in response</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_ConditionSetRead_ List_condition_sets(string proj_id, string env_id, string? search = null, ConditionSetType? type = null, bool? include_total_count = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_condition_setsAsync(proj_id, env_id, search, type, include_total_count, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Condition Sets
        /// </summary>
        /// <remarks>
        /// Lists all condition sets matching a filter.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="search">Text search for the condition sets name or key</param>
        /// <param name="type">if provided, will return only the condition sets of the specified type. e.g: only user sets.</param>
        /// <param name="include_total_count">Include total count in response</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_ConditionSetRead_> List_condition_setsAsync(string proj_id, string env_id, string? search = null, ConditionSetType? type = null, bool? include_total_count = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/condition_sets"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/condition_sets");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (include_total_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("include_total_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(include_total_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_ConditionSetRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Condition Set
        /// </summary>
        /// <remarks>
        /// Creates a new condition set (can be either a user set or a resource set).
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ConditionSetRead Create_condition_set(string proj_id, string env_id, ConditionSetCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_condition_setAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Condition Set
        /// </summary>
        /// <remarks>
        /// Creates a new condition set (can be either a user set or a resource set).
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ConditionSetRead> Create_condition_setAsync(string proj_id, string env_id, ConditionSetCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/condition_sets"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/condition_sets");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConditionSetRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Condition Set
        /// </summary>
        /// <remarks>
        /// Gets a single condition set, if such condition set exists.
        /// </remarks>
        /// <param name="condition_set_id">Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ConditionSetRead Get_condition_set(string condition_set_id, string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_condition_setAsync(condition_set_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Condition Set
        /// </summary>
        /// <remarks>
        /// Gets a single condition set, if such condition set exists.
        /// </remarks>
        /// <param name="condition_set_id">Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ConditionSetRead> Get_condition_setAsync(string condition_set_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (condition_set_id == null)
                throw new System.ArgumentNullException("condition_set_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/condition_sets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(condition_set_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConditionSetRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Condition Set
        /// </summary>
        /// <remarks>
        /// Deletes a condition set and all its related data.
        /// <br/>This includes any permissions granted to said condition set (i.e: any matching condition set users_with_role).
        /// </remarks>
        /// <param name="condition_set_id">Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_condition_set(string condition_set_id, string proj_id, string env_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_condition_setAsync(condition_set_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Condition Set
        /// </summary>
        /// <remarks>
        /// Deletes a condition set and all its related data.
        /// <br/>This includes any permissions granted to said condition set (i.e: any matching condition set users_with_role).
        /// </remarks>
        /// <param name="condition_set_id">Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_condition_setAsync(string condition_set_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (condition_set_id == null)
                throw new System.ArgumentNullException("condition_set_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/condition_sets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(condition_set_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Condition Set
        /// </summary>
        /// <remarks>
        /// Partially updates a condition set.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="condition_set_id">Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ConditionSetRead Update_condition_set(string condition_set_id, string proj_id, string env_id, ConditionSetUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_condition_setAsync(condition_set_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Condition Set
        /// </summary>
        /// <remarks>
        /// Partially updates a condition set.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="condition_set_id">Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ConditionSetRead> Update_condition_setAsync(string condition_set_id, string proj_id, string env_id, ConditionSetUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (condition_set_id == null)
                throw new System.ArgumentNullException("condition_set_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/condition_sets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(condition_set_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConditionSetRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Condition Set Ancestors
        /// </summary>
        /// <remarks>
        /// Gets all ancestors (parent, parent of parent, and so on)
        /// </remarks>
        /// <param name="condition_set_id">Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ConditionSetRead> Get_condition_set_ancestors(string condition_set_id, string proj_id, string env_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_condition_set_ancestorsAsync(condition_set_id, proj_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Condition Set Ancestors
        /// </summary>
        /// <remarks>
        /// Gets all ancestors (parent, parent of parent, and so on)
        /// </remarks>
        /// <param name="condition_set_id">Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConditionSetRead>> Get_condition_set_ancestorsAsync(string condition_set_id, string proj_id, string env_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (condition_set_id == null)
                throw new System.ArgumentNullException("condition_set_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/ancestors"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/condition_sets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(condition_set_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/ancestors");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ConditionSetRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Condition Set Descendants
        /// </summary>
        /// <remarks>
        /// Gets all descendants (children, children of children, and so on)
        /// </remarks>
        /// <param name="condition_set_id">Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ConditionSetRead> Get_condition_set_descendants(string condition_set_id, string proj_id, string env_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_condition_set_descendantsAsync(condition_set_id, proj_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Condition Set Descendants
        /// </summary>
        /// <remarks>
        /// Gets all descendants (children, children of children, and so on)
        /// </remarks>
        /// <param name="condition_set_id">Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConditionSetRead>> Get_condition_set_descendantsAsync(string condition_set_id, string proj_id, string env_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (condition_set_id == null)
                throw new System.ArgumentNullException("condition_set_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/descendants"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/condition_sets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(condition_set_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/descendants");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ConditionSetRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Implicit Grant
        /// </summary>
        /// <remarks>
        /// Creates an implicit grant on a given role
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual DerivedRoleRuleRead Create_implicit_grant(string resource_id, string role_id, string proj_id, string env_id, DerivedRoleRuleCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_implicit_grantAsync(resource_id, role_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Implicit Grant
        /// </summary>
        /// <remarks>
        /// Creates an implicit grant on a given role
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DerivedRoleRuleRead> Create_implicit_grantAsync(string resource_id, string role_id, string proj_id, string env_id, DerivedRoleRuleCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/implicit_grants"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/implicit_grants");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DerivedRoleRuleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Implicit Grant
        /// </summary>
        /// <remarks>
        /// Deletes an implicit grant on a given role
        /// </remarks>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_implicit_grant(string role_id, string resource_id, string proj_id, string env_id, DerivedRoleRuleDelete body)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_implicit_grantAsync(role_id, resource_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Implicit Grant
        /// </summary>
        /// <remarks>
        /// Deletes an implicit grant on a given role
        /// </remarks>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_implicit_grantAsync(string role_id, string resource_id, string proj_id, string env_id, DerivedRoleRuleDelete body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/implicit_grants"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/implicit_grants");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Implicit Grants Conditions
        /// </summary>
        /// <remarks>
        /// Update the `when` for implicit grants on a given role
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual Permit_backend__schemas__schema_derived_role_rule__DerivationSettings Update_implicit_grants_conditions(string resource_id, string role_id, string proj_id, string env_id, Permit_backend__schemas__schema_derived_role_rule__DerivationSettings body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_implicit_grants_conditionsAsync(resource_id, role_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Implicit Grants Conditions
        /// </summary>
        /// <remarks>
        /// Update the `when` for implicit grants on a given role
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Permit_backend__schemas__schema_derived_role_rule__DerivationSettings> Update_implicit_grants_conditionsAsync(string resource_id, string role_id, string proj_id, string env_id, Permit_backend__schemas__schema_derived_role_rule__DerivationSettings body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/implicit_grants/conditions"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/implicit_grants/conditions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Permit_backend__schemas__schema_derived_role_rule__DerivationSettings>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Resource Action Groups
        /// </summary>
        /// <remarks>
        /// Lists all the action groups defined on the resource.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ResourceActionGroupRead> List_resource_action_groups(string resource_id, string proj_id, string env_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_resource_action_groupsAsync(resource_id, proj_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Resource Action Groups
        /// </summary>
        /// <remarks>
        /// Lists all the action groups defined on the resource.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ResourceActionGroupRead>> List_resource_action_groupsAsync(string resource_id, string proj_id, string env_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/action_groups");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResourceActionGroupRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Resource Action Group
        /// </summary>
        /// <remarks>
        /// Creates a new action group that can affect the resource.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceActionGroupRead Create_resource_action_group(string resource_id, string proj_id, string env_id, ResourceActionGroupCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_resource_action_groupAsync(resource_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Resource Action Group
        /// </summary>
        /// <remarks>
        /// Creates a new action group that can affect the resource.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceActionGroupRead> Create_resource_action_groupAsync(string resource_id, string proj_id, string env_id, ResourceActionGroupCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/action_groups");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceActionGroupRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Resource Action Group
        /// </summary>
        /// <remarks>
        /// Gets a single action group defined on the resource, if such action exists.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="action_group_id">Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceActionGroupRead Get_resource_action_group(string resource_id, string action_group_id, string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_resource_action_groupAsync(resource_id, action_group_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Resource Action Group
        /// </summary>
        /// <remarks>
        /// Gets a single action group defined on the resource, if such action exists.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="action_group_id">Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceActionGroupRead> Get_resource_action_groupAsync(string resource_id, string action_group_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (action_group_id == null)
                throw new System.ArgumentNullException("action_group_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/action_groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(action_group_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceActionGroupRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Resource Action Group
        /// </summary>
        /// <remarks>
        /// Deletes the action and all its related data.
        /// <br/>This includes any permissions granted to perform the action.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="action_group_id">Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_resource_action_group(string resource_id, string action_group_id, string proj_id, string env_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_resource_action_groupAsync(resource_id, action_group_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Resource Action Group
        /// </summary>
        /// <remarks>
        /// Deletes the action and all its related data.
        /// <br/>This includes any permissions granted to perform the action.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="action_group_id">Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_resource_action_groupAsync(string resource_id, string action_group_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (action_group_id == null)
                throw new System.ArgumentNullException("action_group_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/action_groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(action_group_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Resource Action Group
        /// </summary>
        /// <remarks>
        /// Partially updates the action defined on a resource.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="action_group_id">Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceActionGroupRead Update_resource_action_group(string resource_id, string action_group_id, string proj_id, string env_id, ResourceActionGroupUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_resource_action_groupAsync(resource_id, action_group_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Resource Action Group
        /// </summary>
        /// <remarks>
        /// Partially updates the action defined on a resource.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="action_group_id">Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceActionGroupRead> Update_resource_action_groupAsync(string resource_id, string action_group_id, string proj_id, string env_id, ResourceActionGroupUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (action_group_id == null)
                throw new System.ArgumentNullException("action_group_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/action_groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(action_group_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceActionGroupRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Resource Actions
        /// </summary>
        /// <remarks>
        /// Lists all the actions defined on the resource.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ResourceActionRead> List_resource_actions(string resource_id, string proj_id, string env_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_resource_actionsAsync(resource_id, proj_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Resource Actions
        /// </summary>
        /// <remarks>
        /// Lists all the actions defined on the resource.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ResourceActionRead>> List_resource_actionsAsync(string resource_id, string proj_id, string env_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/actions");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResourceActionRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Resource Action
        /// </summary>
        /// <remarks>
        /// Creates a new action that can affect the resource.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceActionRead Create_resource_action(string resource_id, string proj_id, string env_id, ResourceActionCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_resource_actionAsync(resource_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Resource Action
        /// </summary>
        /// <remarks>
        /// Creates a new action that can affect the resource.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceActionRead> Create_resource_actionAsync(string resource_id, string proj_id, string env_id, ResourceActionCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/actions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceActionRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Resource Action
        /// </summary>
        /// <remarks>
        /// Gets a single action defined on the resource, if such action exists.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="action_id">Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceActionRead Get_resource_action(string resource_id, string action_id, string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_resource_actionAsync(resource_id, action_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Resource Action
        /// </summary>
        /// <remarks>
        /// Gets a single action defined on the resource, if such action exists.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="action_id">Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceActionRead> Get_resource_actionAsync(string resource_id, string action_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (action_id == null)
                throw new System.ArgumentNullException("action_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/actions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(action_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceActionRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Resource Action
        /// </summary>
        /// <remarks>
        /// Deletes the action and all its related data.
        /// <br/>This includes any permissions granted to perform the action.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="action_id">Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_resource_action(string resource_id, string action_id, string proj_id, string env_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_resource_actionAsync(resource_id, action_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Resource Action
        /// </summary>
        /// <remarks>
        /// Deletes the action and all its related data.
        /// <br/>This includes any permissions granted to perform the action.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="action_id">Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_resource_actionAsync(string resource_id, string action_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (action_id == null)
                throw new System.ArgumentNullException("action_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/actions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(action_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Resource Action
        /// </summary>
        /// <remarks>
        /// Partially updates the action defined on a resource.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="action_id">Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceActionRead Update_resource_action(string resource_id, string action_id, string proj_id, string env_id, ResourceActionUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_resource_actionAsync(resource_id, action_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Resource Action
        /// </summary>
        /// <remarks>
        /// Partially updates the action defined on a resource.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="action_id">Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceActionRead> Update_resource_actionAsync(string resource_id, string action_id, string proj_id, string env_id, ResourceActionUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (action_id == null)
                throw new System.ArgumentNullException("action_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/actions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(action_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceActionRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Resource Attributes
        /// </summary>
        /// <remarks>
        /// Lists all the attributes defined on the resource.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ResourceAttributeRead> List_resource_attributes(string resource_id, string proj_id, string env_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_resource_attributesAsync(resource_id, proj_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Resource Attributes
        /// </summary>
        /// <remarks>
        /// Lists all the attributes defined on the resource.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ResourceAttributeRead>> List_resource_attributesAsync(string resource_id, string proj_id, string env_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attributes");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResourceAttributeRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Resource Attribute
        /// </summary>
        /// <remarks>
        /// Creates a new attribute as part of the resource definition.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceAttributeRead Create_resource_attribute(string resource_id, string proj_id, string env_id, ResourceAttributeCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_resource_attributeAsync(resource_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Resource Attribute
        /// </summary>
        /// <remarks>
        /// Creates a new attribute as part of the resource definition.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceAttributeRead> Create_resource_attributeAsync(string resource_id, string proj_id, string env_id, ResourceAttributeCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attributes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceAttributeRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Resource Attribute
        /// </summary>
        /// <remarks>
        /// Gets a single attribute defined on the resource, if such attribute exists.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="attribute_id">Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceAttributeRead Get_resource_attribute(string resource_id, string attribute_id, string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_resource_attributeAsync(resource_id, attribute_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Resource Attribute
        /// </summary>
        /// <remarks>
        /// Gets a single attribute defined on the resource, if such attribute exists.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="attribute_id">Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceAttributeRead> Get_resource_attributeAsync(string resource_id, string attribute_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (attribute_id == null)
                throw new System.ArgumentNullException("attribute_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attributes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(attribute_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceAttributeRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Resource Attribute
        /// </summary>
        /// <remarks>
        /// Deletes the attribute and all its related data.
        /// <br/>
        /// <br/>Note: If the attribute is used by policies, removing it will cause the
        /// <br/>attribute to evaluate as `undefined`.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="attribute_id">Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_resource_attribute(string resource_id, string attribute_id, string proj_id, string env_id, int? page = null, int? per_page = null)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_resource_attributeAsync(resource_id, attribute_id, proj_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Resource Attribute
        /// </summary>
        /// <remarks>
        /// Deletes the attribute and all its related data.
        /// <br/>
        /// <br/>Note: If the attribute is used by policies, removing it will cause the
        /// <br/>attribute to evaluate as `undefined`.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="attribute_id">Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_resource_attributeAsync(string resource_id, string attribute_id, string proj_id, string env_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (attribute_id == null)
                throw new System.ArgumentNullException("attribute_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attributes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(attribute_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Resource Attribute
        /// </summary>
        /// <remarks>
        /// Partially updates the attribute defined on a resource.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="attribute_id">Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceAttributeRead Update_resource_attribute(string resource_id, string attribute_id, string proj_id, string env_id, ResourceAttributeUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_resource_attributeAsync(resource_id, attribute_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Resource Attribute
        /// </summary>
        /// <remarks>
        /// Partially updates the attribute defined on a resource.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="attribute_id">Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceAttributeRead> Update_resource_attributeAsync(string resource_id, string attribute_id, string proj_id, string env_id, ResourceAttributeUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (attribute_id == null)
                throw new System.ArgumentNullException("attribute_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attributes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(attribute_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceAttributeRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Resource Relations
        /// </summary>
        /// <remarks>
        /// List relations on a given resource
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_RelationRead_ List_resource_relations(string resource_id, string proj_id, string env_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_resource_relationsAsync(resource_id, proj_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Resource Relations
        /// </summary>
        /// <remarks>
        /// List relations on a given resource
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_RelationRead_> List_resource_relationsAsync(string resource_id, string proj_id, string env_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/relations");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_RelationRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Resource Relation
        /// </summary>
        /// <remarks>
        /// Creates a resource relation to another resource
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RelationRead Create_resource_relation(string resource_id, string proj_id, string env_id, RelationCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_resource_relationAsync(resource_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Resource Relation
        /// </summary>
        /// <remarks>
        /// Creates a resource relation to another resource
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RelationRead> Create_resource_relationAsync(string resource_id, string proj_id, string env_id, RelationCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/relations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RelationRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Resource Relation
        /// </summary>
        /// <remarks>
        /// Get a resource relation
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="relation_id">Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RelationRead Get_resource_relation(string resource_id, string relation_id, string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_resource_relationAsync(resource_id, relation_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Resource Relation
        /// </summary>
        /// <remarks>
        /// Get a resource relation
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="relation_id">Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RelationRead> Get_resource_relationAsync(string resource_id, string relation_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (relation_id == null)
                throw new System.ArgumentNullException("relation_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations/{relation_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/relations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(relation_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RelationRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Resource Relation
        /// </summary>
        /// <remarks>
        /// Deletes a resource relation
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="relation_id">Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_resource_relation(string resource_id, string relation_id, string proj_id, string env_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_resource_relationAsync(resource_id, relation_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Resource Relation
        /// </summary>
        /// <remarks>
        /// Deletes a resource relation
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="relation_id">Either the unique id of the relation, or the URL-friendly key of the relation (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_resource_relationAsync(string resource_id, string relation_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (relation_id == null)
                throw new System.ArgumentNullException("relation_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/relations/{relation_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/relations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(relation_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Resource Roles
        /// </summary>
        /// <remarks>
        /// Lists all the roles defined on the resource.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ResourceRoleRead> List_resource_roles(string resource_id, string proj_id, string env_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_resource_rolesAsync(resource_id, proj_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Resource Roles
        /// </summary>
        /// <remarks>
        /// Lists all the roles defined on the resource.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ResourceRoleRead>> List_resource_rolesAsync(string resource_id, string proj_id, string env_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResourceRoleRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Resource Role
        /// </summary>
        /// <remarks>
        /// Creates a new role associated with the resource.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRoleRead Create_resource_role(string resource_id, string proj_id, string env_id, ResourceRoleCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_resource_roleAsync(resource_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Resource Role
        /// </summary>
        /// <remarks>
        /// Creates a new role associated with the resource.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRoleRead> Create_resource_roleAsync(string resource_id, string proj_id, string env_id, ResourceRoleCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Resource Role
        /// </summary>
        /// <remarks>
        /// Gets a single role defined on the resource, if such role exists.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRoleRead Get_resource_role(string resource_id, string role_id, string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_resource_roleAsync(resource_id, role_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Resource Role
        /// </summary>
        /// <remarks>
        /// Gets a single role defined on the resource, if such role exists.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRoleRead> Get_resource_roleAsync(string resource_id, string role_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Resource Role
        /// </summary>
        /// <remarks>
        /// Deletes the role and all its related data.
        /// <br/>This includes any permissions granted to said role.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_resource_role(string resource_id, string role_id, string proj_id, string env_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_resource_roleAsync(resource_id, role_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Resource Role
        /// </summary>
        /// <remarks>
        /// Deletes the role and all its related data.
        /// <br/>This includes any permissions granted to said role.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_resource_roleAsync(string resource_id, string role_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Resource Role
        /// </summary>
        /// <remarks>
        /// Partially updates the role defined on a resource.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRoleRead Update_resource_role(string resource_id, string role_id, string proj_id, string env_id, ResourceRoleUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_resource_roleAsync(resource_id, role_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Resource Role
        /// </summary>
        /// <remarks>
        /// Partially updates the role defined on a resource.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRoleRead> Update_resource_roleAsync(string resource_id, string role_id, string proj_id, string env_id, ResourceRoleUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign Permissions to Role
        /// </summary>
        /// <remarks>
        /// Assign permissions to role.
        /// <br/>
        /// <br/>If some of the permissions specified are already assigned, will skip them.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRoleRead Assign_permissions_to_resource_role(string resource_id, string role_id, string proj_id, string env_id, AddRolePermissions body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Assign_permissions_to_resource_roleAsync(resource_id, role_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign Permissions to Role
        /// </summary>
        /// <remarks>
        /// Assign permissions to role.
        /// <br/>
        /// <br/>If some of the permissions specified are already assigned, will skip them.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRoleRead> Assign_permissions_to_resource_roleAsync(string resource_id, string role_id, string proj_id, string env_id, AddRolePermissions body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/permissions"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove Permissions from Role
        /// </summary>
        /// <remarks>
        /// Remove permissions from role.
        /// <br/>
        /// <br/>If some of the permissions specified are already unassigned, will skip them.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRoleRead Remove_permissions_from_resource_role(string resource_id, string role_id, string proj_id, string env_id, RemoveRolePermissions body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Remove_permissions_from_resource_roleAsync(resource_id, role_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Permissions from Role
        /// </summary>
        /// <remarks>
        /// Remove permissions from role.
        /// <br/>
        /// <br/>If some of the permissions specified are already unassigned, will skip them.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRoleRead> Remove_permissions_from_resource_roleAsync(string resource_id, string role_id, string proj_id, string env_id, RemoveRolePermissions body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/permissions"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Resource Role Ancestors
        /// </summary>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRoleList Get_resource_role_ancestors(string resource_id, string role_id, string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_resource_role_ancestorsAsync(resource_id, role_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Resource Role Ancestors
        /// </summary>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRoleList> Get_resource_role_ancestorsAsync(string resource_id, string role_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/ancestors"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/ancestors");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRoleList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Resource Role Descendants
        /// </summary>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRoleList Get_resource_role_descendants(string resource_id, string role_id, string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_resource_role_descendantsAsync(resource_id, role_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Resource Role Descendants
        /// </summary>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRoleList> Get_resource_role_descendantsAsync(string resource_id, string role_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/descendants"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/descendants");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRoleList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Resources
        /// </summary>
        /// <remarks>
        /// Lists all the resources defined in your schema.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="include_built_in">Whether to include or exclude built-in resources, default is False</param>
        /// <param name="include_total_count">Include total count in response</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <param name="search">Text search for the object name or key</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_ResourceRead_ List_resources(string proj_id, string env_id, bool? include_built_in = null, bool? include_total_count = null, int? page = null, int? per_page = null, string? search = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_resourcesAsync(proj_id, env_id, include_built_in, include_total_count, page, per_page, search, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Resources
        /// </summary>
        /// <remarks>
        /// Lists all the resources defined in your schema.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="include_built_in">Whether to include or exclude built-in resources, default is False</param>
        /// <param name="include_total_count">Include total count in response</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <param name="search">Text search for the object name or key</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_ResourceRead_> List_resourcesAsync(string proj_id, string env_id, bool? include_built_in = null, bool? include_total_count = null, int? page = null, int? per_page = null, string? search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources");
                    urlBuilder_.Append('?');
                    if (include_built_in != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("include_built_in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(include_built_in, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (include_total_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("include_total_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(include_total_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_ResourceRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Resource
        /// </summary>
        /// <remarks>
        /// Creates a new resource (a type of object you may protect with permissions).
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRead Create_resource(string proj_id, string env_id, ResourceCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_resourceAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Resource
        /// </summary>
        /// <remarks>
        /// Creates a new resource (a type of object you may protect with permissions).
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRead> Create_resourceAsync(string proj_id, string env_id, ResourceCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Resource
        /// </summary>
        /// <remarks>
        /// Gets a single resource, if such resource exists.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRead Get_resource(string resource_id, string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_resourceAsync(resource_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Resource
        /// </summary>
        /// <remarks>
        /// Gets a single resource, if such resource exists.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRead> Get_resourceAsync(string resource_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Replace Resource
        /// </summary>
        /// <remarks>
        /// Completely replaces the resource definition.
        /// <br/>
        /// <br/>- If the resource key is changed, all role and permissions assignments for the the resource will be revoked.
        /// <br/>- If the resource key is unchanged, but some actions are removed or renamed from the resource definition,
        /// <br/>role and permissions assignments for these actions will be revoked.
        /// <br/>
        /// <br/>TODO: we need to decide if we are auto-revoking, or if we are rejecting the PUT completely while there are permissions that can be affected.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRead Replace_resource(string resource_id, string proj_id, string env_id, ResourceReplace body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Replace_resourceAsync(resource_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Replace Resource
        /// </summary>
        /// <remarks>
        /// Completely replaces the resource definition.
        /// <br/>
        /// <br/>- If the resource key is changed, all role and permissions assignments for the the resource will be revoked.
        /// <br/>- If the resource key is unchanged, but some actions are removed or renamed from the resource definition,
        /// <br/>role and permissions assignments for these actions will be revoked.
        /// <br/>
        /// <br/>TODO: we need to decide if we are auto-revoking, or if we are rejecting the PUT completely while there are permissions that can be affected.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRead> Replace_resourceAsync(string resource_id, string proj_id, string env_id, ResourceReplace body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Resource
        /// </summary>
        /// <remarks>
        /// Deletes the resource and all its related data.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_resource(string resource_id, string proj_id, string env_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_resourceAsync(resource_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Resource
        /// </summary>
        /// <remarks>
        /// Deletes the resource and all its related data.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_resourceAsync(string resource_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Resource
        /// </summary>
        /// <remarks>
        /// Partially updates the resource definition.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceRead Update_resource(string resource_id, string proj_id, string env_id, ResourceUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_resourceAsync(resource_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Resource
        /// </summary>
        /// <remarks>
        /// Partially updates the resource definition.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="resource_id">Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceRead> Update_resourceAsync(string resource_id, string proj_id, string env_id, ResourceUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resource_id == null)
                throw new System.ArgumentNullException("resource_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/resources/{resource_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Roles
        /// </summary>
        /// <remarks>
        /// Lists all tenant roles.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="include_total_count">Include total count in response</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <param name="search">Text search for the object name or key</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_RoleRead_ List_roles(string proj_id, string env_id, bool? include_total_count = null, int? page = null, int? per_page = null, string? search = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_rolesAsync(proj_id, env_id, include_total_count, page, per_page, search, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Roles
        /// </summary>
        /// <remarks>
        /// Lists all tenant roles.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="include_total_count">Include total count in response</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <param name="search">Text search for the object name or key</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_RoleRead_> List_rolesAsync(string proj_id, string env_id, bool? include_total_count = null, int? page = null, int? per_page = null, string? search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/roles"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles");
                    urlBuilder_.Append('?');
                    if (include_total_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("include_total_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(include_total_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_RoleRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Role
        /// </summary>
        /// <remarks>
        /// Creates a new tenant role.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleRead Create_role(string proj_id, string env_id, RoleCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_roleAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Role
        /// </summary>
        /// <remarks>
        /// Creates a new tenant role.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleRead> Create_roleAsync(string proj_id, string env_id, RoleCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/roles"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Role
        /// </summary>
        /// <remarks>
        /// Gets a single tenant role, if such role exists.
        /// </remarks>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleRead Get_role(string role_id, string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_roleAsync(role_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Role
        /// </summary>
        /// <remarks>
        /// Gets a single tenant role, if such role exists.
        /// </remarks>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleRead> Get_roleAsync(string role_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/roles/{role_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Role
        /// </summary>
        /// <remarks>
        /// Deletes a tenant role and all its related data.
        /// <br/>This includes any permissions granted to said role.
        /// </remarks>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_role(string role_id, string proj_id, string env_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_roleAsync(role_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Role
        /// </summary>
        /// <remarks>
        /// Deletes a tenant role and all its related data.
        /// <br/>This includes any permissions granted to said role.
        /// </remarks>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_roleAsync(string role_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/roles/{role_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Role
        /// </summary>
        /// <remarks>
        /// Partially updates a tenant role.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleRead Update_role(string role_id, string proj_id, string env_id, RoleUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_roleAsync(role_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Role
        /// </summary>
        /// <remarks>
        /// Partially updates a tenant role.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleRead> Update_roleAsync(string role_id, string proj_id, string env_id, RoleUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/roles/{role_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign Permissions To Role
        /// </summary>
        /// <remarks>
        /// Assign permissions to role.
        /// <br/>
        /// <br/>If some of the permissions specified are already assigned, will skip them.
        /// </remarks>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleRead Assign_permissions_to_role(string role_id, string proj_id, string env_id, AddRolePermissions body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Assign_permissions_to_roleAsync(role_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign Permissions To Role
        /// </summary>
        /// <remarks>
        /// Assign permissions to role.
        /// <br/>
        /// <br/>If some of the permissions specified are already assigned, will skip them.
        /// </remarks>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleRead> Assign_permissions_to_roleAsync(string role_id, string proj_id, string env_id, AddRolePermissions body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove Permissions From Role
        /// </summary>
        /// <remarks>
        /// Remove permissions from role.
        /// <br/>
        /// <br/>If some of the permissions specified are already unassigned, will skip them.
        /// </remarks>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleRead Remove_permissions_from_role(string role_id, string proj_id, string env_id, RemoveRolePermissions body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Remove_permissions_from_roleAsync(role_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Permissions From Role
        /// </summary>
        /// <remarks>
        /// Remove permissions from role.
        /// <br/>
        /// <br/>If some of the permissions specified are already unassigned, will skip them.
        /// </remarks>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleRead> Remove_permissions_from_roleAsync(string role_id, string proj_id, string env_id, RemoveRolePermissions body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Role Ancestors
        /// </summary>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleList Get_role_ancestors(string role_id, string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_role_ancestorsAsync(role_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Role Ancestors
        /// </summary>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleList> Get_role_ancestorsAsync(string role_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/roles/{role_id}/ancestors"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/ancestors");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Role Descendants
        /// </summary>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleList Get_role_descendants(string role_id, string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_role_descendantsAsync(role_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Role Descendants
        /// </summary>
        /// <param name="role_id">Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleList> Get_role_descendantsAsync(string role_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/roles/{role_id}/descendants"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/descendants");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List User Attributes
        /// </summary>
        /// <remarks>
        /// Lists all the attributes defined on the User resource.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ResourceAttributeRead> List_user_attributes(string proj_id, string env_id, string? resource_id = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_user_attributesAsync(proj_id, env_id, resource_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List User Attributes
        /// </summary>
        /// <remarks>
        /// Lists all the attributes defined on the User resource.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ResourceAttributeRead>> List_user_attributesAsync(string proj_id, string env_id, string? resource_id = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/users/attributes"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/attributes");
                    urlBuilder_.Append('?');
                    if (resource_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ResourceAttributeRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create User Attribute
        /// </summary>
        /// <remarks>
        /// Creates a new attribute for the User resource.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceAttributeRead Create_user_attribute(string proj_id, string env_id, ResourceAttributeCreate body, string? resource_id = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_user_attributeAsync(proj_id, env_id, body, resource_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create User Attribute
        /// </summary>
        /// <remarks>
        /// Creates a new attribute for the User resource.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceAttributeRead> Create_user_attributeAsync(string proj_id, string env_id, ResourceAttributeCreate body, string? resource_id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/users/attributes"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/attributes");
                    urlBuilder_.Append('?');
                    if (resource_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceAttributeRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get User Attribute
        /// </summary>
        /// <remarks>
        /// Gets a single attribute defined on the User resource, if such attribute exists.
        /// </remarks>
        /// <param name="attribute_id">Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceAttributeRead Get_user_attribute(string attribute_id, string proj_id, string env_id, string? resource_id = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_user_attributeAsync(attribute_id, proj_id, env_id, resource_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get User Attribute
        /// </summary>
        /// <remarks>
        /// Gets a single attribute defined on the User resource, if such attribute exists.
        /// </remarks>
        /// <param name="attribute_id">Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceAttributeRead> Get_user_attributeAsync(string attribute_id, string proj_id, string env_id, string? resource_id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (attribute_id == null)
                throw new System.ArgumentNullException("attribute_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/attributes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(attribute_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (resource_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceAttributeRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete User Attribute
        /// </summary>
        /// <remarks>
        /// Deletes the attribute and all its related data.
        /// <br/>
        /// <br/>Note: If the attribute is used by policies, removing it will cause the
        /// <br/>attribute to evaluate as `undefined`.
        /// </remarks>
        /// <param name="attribute_id">Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_user_attribute(string attribute_id, string proj_id, string env_id, string? resource_id = null, int? page = null, int? per_page = null)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_user_attributeAsync(attribute_id, proj_id, env_id, resource_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete User Attribute
        /// </summary>
        /// <remarks>
        /// Deletes the attribute and all its related data.
        /// <br/>
        /// <br/>Note: If the attribute is used by policies, removing it will cause the
        /// <br/>attribute to evaluate as `undefined`.
        /// </remarks>
        /// <param name="attribute_id">Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_user_attributeAsync(string attribute_id, string proj_id, string env_id, string? resource_id = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (attribute_id == null)
                throw new System.ArgumentNullException("attribute_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/attributes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(attribute_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (resource_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update User Attribute
        /// </summary>
        /// <remarks>
        /// Partially updates the attribute defined on the User resource.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="attribute_id">Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceAttributeRead Update_user_attribute(string attribute_id, string proj_id, string env_id, ResourceAttributeUpdate body, string? resource_id = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_user_attributeAsync(attribute_id, proj_id, env_id, body, resource_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update User Attribute
        /// </summary>
        /// <remarks>
        /// Partially updates the attribute defined on the User resource.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="attribute_id">Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceAttributeRead> Update_user_attributeAsync(string attribute_id, string proj_id, string env_id, ResourceAttributeUpdate body, string? resource_id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (attribute_id == null)
                throw new System.ArgumentNullException("attribute_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}"
                    urlBuilder_.Append("v2/schema/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/attributes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(attribute_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (resource_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceAttributeRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Group
        /// </summary>
        /// <remarks>
        /// Retrieve a specific group by its instance key.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="group_instance_key">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual GroupRead Get_group(string proj_id, string env_id, string group_instance_key)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_groupAsync(proj_id, env_id, group_instance_key, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Group
        /// </summary>
        /// <remarks>
        /// Retrieve a specific group by its instance key.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="group_instance_key">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GroupRead> Get_groupAsync(string proj_id, string env_id, string group_instance_key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (group_instance_key == null)
                throw new System.ArgumentNullException("group_instance_key");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/groups/{group_instance_key}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_instance_key, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GroupRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Group
        /// </summary>
        /// <remarks>
        /// Delete a group by its instance key.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="group_instance_key">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_group(string proj_id, string env_id, string group_instance_key)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_groupAsync(proj_id, env_id, group_instance_key, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Group
        /// </summary>
        /// <remarks>
        /// Delete a group by its instance key.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="group_instance_key">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_groupAsync(string proj_id, string env_id, string group_instance_key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (group_instance_key == null)
                throw new System.ArgumentNullException("group_instance_key");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/groups/{group_instance_key}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_instance_key, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Group
        /// </summary>
        /// <remarks>
        /// List all groups.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="tenant">The tenant key or id to filter by</param>
        /// <param name="resource">The resource key or id to filter by</param>
        /// <param name="include_total_count">Include total count in response(will make the request slower)</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <param name="search">Text search for the object name or key</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<GroupRead> List_group(string proj_id, string env_id, string? tenant = null, string? resource = null, bool? include_total_count = null, int? page = null, int? per_page = null, string? search = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_groupAsync(proj_id, env_id, tenant, resource, include_total_count, page, per_page, search, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Group
        /// </summary>
        /// <remarks>
        /// List all groups.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="tenant">The tenant key or id to filter by</param>
        /// <param name="resource">The resource key or id to filter by</param>
        /// <param name="include_total_count">Include total count in response(will make the request slower)</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <param name="search">Text search for the object name or key</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupRead>> List_groupAsync(string proj_id, string env_id, string? tenant = null, string? resource = null, bool? include_total_count = null, int? page = null, int? per_page = null, string? search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/groups"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups");
                    urlBuilder_.Append('?');
                    if (tenant != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tenant")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (resource != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (include_total_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("include_total_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(include_total_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GroupRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Group
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual GroupRead Create_group(string proj_id, string env_id, GroupCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_groupAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Group
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GroupRead> Create_groupAsync(string proj_id, string env_id, GroupCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/groups"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GroupRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign User To Group
        /// </summary>
        /// <remarks>
        /// Assign a user to a group -
        /// <br/>This user will inherit the group's roles.
        /// </remarks>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="group_instance_key">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual GroupRead Assign_user_to_group(string user_id, string proj_id, string env_id, string group_instance_key, GroupAssignUser body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Assign_user_to_groupAsync(user_id, proj_id, env_id, group_instance_key, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign User To Group
        /// </summary>
        /// <remarks>
        /// Assign a user to a group -
        /// <br/>This user will inherit the group's roles.
        /// </remarks>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="group_instance_key">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GroupRead> Assign_user_to_groupAsync(string user_id, string proj_id, string env_id, string group_instance_key, GroupAssignUser body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (group_instance_key == null)
                throw new System.ArgumentNullException("group_instance_key");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/groups/{group_instance_key}/users/{user_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_instance_key, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GroupRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove User From Group
        /// </summary>
        /// <remarks>
        /// Remove a user from a group-
        /// <br/>This user will be removed from the member role of the group, and will no longer inherit the group's roles.
        /// </remarks>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="group_instance_key">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Remove_user_from_group(string user_id, string proj_id, string env_id, string group_instance_key, GroupAssignUser body)
        {
            System.Threading.Tasks.Task.Run(async () => await Remove_user_from_groupAsync(user_id, proj_id, env_id, group_instance_key, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove User From Group
        /// </summary>
        /// <remarks>
        /// Remove a user from a group-
        /// <br/>This user will be removed from the member role of the group, and will no longer inherit the group's roles.
        /// </remarks>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="group_instance_key">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Remove_user_from_groupAsync(string user_id, string proj_id, string env_id, string group_instance_key, GroupAssignUser body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (group_instance_key == null)
                throw new System.ArgumentNullException("group_instance_key");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/groups/{group_instance_key}/users/{user_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_instance_key, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign Role To Group
        /// </summary>
        /// <remarks>
        /// Assign a role to a group -
        /// <br/>It will create relation between the group and the resource, relationship between the resource instances and derivation from the member role to this role.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="group_instance_key">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual GroupRead Assign_role_to_group(string proj_id, string env_id, string group_instance_key, GroupAddRole body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Assign_role_to_groupAsync(proj_id, env_id, group_instance_key, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign Role To Group
        /// </summary>
        /// <remarks>
        /// Assign a role to a group -
        /// <br/>It will create relation between the group and the resource, relationship between the resource instances and derivation from the member role to this role.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="group_instance_key">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GroupRead> Assign_role_to_groupAsync(string proj_id, string env_id, string group_instance_key, GroupAddRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (group_instance_key == null)
                throw new System.ArgumentNullException("group_instance_key");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/groups/{group_instance_key}/roles"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_instance_key, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GroupRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove Role From Group
        /// </summary>
        /// <remarks>
        /// Remove a role from a group-
        /// <br/>It will remove the derivation from the member role to this role.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="group_instance_key">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Remove_role_from_group(string proj_id, string env_id, string group_instance_key, GroupAddRole body)
        {
            System.Threading.Tasks.Task.Run(async () => await Remove_role_from_groupAsync(proj_id, env_id, group_instance_key, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Role From Group
        /// </summary>
        /// <remarks>
        /// Remove a role from a group-
        /// <br/>It will remove the derivation from the member role to this role.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="group_instance_key">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Remove_role_from_groupAsync(string proj_id, string env_id, string group_instance_key, GroupAddRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (group_instance_key == null)
                throw new System.ArgumentNullException("group_instance_key");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/groups/{group_instance_key}/roles"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_instance_key, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign Group To Group
        /// </summary>
        /// <remarks>
        /// Assign a group to a group -
        /// <br/>This group will inherit the group's roles.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="group_instance_key">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual GroupRead Assign_group_to_group(string proj_id, string env_id, string group_instance_key, GroupAssignment body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Assign_group_to_groupAsync(proj_id, env_id, group_instance_key, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign Group To Group
        /// </summary>
        /// <remarks>
        /// Assign a group to a group -
        /// <br/>This group will inherit the group's roles.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="group_instance_key">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GroupRead> Assign_group_to_groupAsync(string proj_id, string env_id, string group_instance_key, GroupAssignment body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (group_instance_key == null)
                throw new System.ArgumentNullException("group_instance_key");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/groups/{group_instance_key}/assign_group"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_instance_key, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/assign_group");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GroupRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove Group From Group
        /// </summary>
        /// <remarks>
        /// Remove a group from a group-
        /// <br/>This group will be removed from the member role of the group, and will no longer inherit the group's roles.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="group_instance_key">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Remove_group_from_group(string proj_id, string env_id, string group_instance_key, GroupAssignment body)
        {
            System.Threading.Tasks.Task.Run(async () => await Remove_group_from_groupAsync(proj_id, env_id, group_instance_key, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Group From Group
        /// </summary>
        /// <remarks>
        /// Remove a group from a group-
        /// <br/>This group will be removed from the member role of the group, and will no longer inherit the group's roles.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="group_instance_key">Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Remove_group_from_groupAsync(string proj_id, string env_id, string group_instance_key, GroupAssignment body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (group_instance_key == null)
                throw new System.ArgumentNullException("group_instance_key");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/groups/{group_instance_key}/assign_group"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(group_instance_key, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/assign_group");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// Lists all the users defined within an environment.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="search">Text search for the email field</param>
        /// <param name="role">Match users with a specific role</param>
        /// <param name="include_resource_instance_roles">Should add resource instance roles</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_UserRead_ List_users(string proj_id, string env_id, string? search = null, string? role = null, bool? include_resource_instance_roles = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_usersAsync(proj_id, env_id, search, role, include_resource_instance_roles, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// Lists all the users defined within an environment.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="search">Text search for the email field</param>
        /// <param name="role">Match users with a specific role</param>
        /// <param name="include_resource_instance_roles">Should add resource instance roles</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_UserRead_> List_usersAsync(string proj_id, string env_id, string? search = null, string? role = null, bool? include_resource_instance_roles = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/users"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (role != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("role")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (include_resource_instance_roles != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("include_resource_instance_roles")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(include_resource_instance_roles, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_UserRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create User
        /// </summary>
        /// <remarks>
        /// Creates a new user inside the Permit.io system, from that point forward
        /// <br/>you may run permission checks on that user.
        /// <br/>
        /// <br/>Returns 201 if the user is created, 409 if the user already exists.
        /// <br/>User is identified by its key, and you can only create one user with the same key inside a Permit environment.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual UserRead Create_user(string proj_id, string env_id, UserCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_userAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create User
        /// </summary>
        /// <remarks>
        /// Creates a new user inside the Permit.io system, from that point forward
        /// <br/>you may run permission checks on that user.
        /// <br/>
        /// <br/>Returns 201 if the user is created, 409 if the user already exists.
        /// <br/>User is identified by its key, and you can only create one user with the same key inside a Permit environment.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserRead> Create_userAsync(string proj_id, string env_id, UserCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/users"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// Gets a user, if such user exists. Otherwise returns 404.
        /// </remarks>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual UserRead Get_user(string user_id, string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_userAsync(user_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// Gets a user, if such user exists. Otherwise returns 404.
        /// </remarks>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserRead> Get_userAsync(string user_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/users/{user_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Replace User
        /// </summary>
        /// <remarks>
        /// Replace User / Sync User upsert a user in the system.
        /// <br/>If the user already exists, it will update the user with the new data.
        /// <br/>If the user does not exist, it will create a new user with the provided data.
        /// <br/>
        /// <br/>The user is identified by its key, and you can only create one user with the same key inside a Permit environment.
        /// <br/>A 200 status code will be returned if the user already exists, and a 201 status code will be returned if the user is created.
        /// </remarks>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>An existing user was replaced</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual UserRead Replace_user(string user_id, string proj_id, string env_id, UserCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Replace_userAsync(user_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Replace User
        /// </summary>
        /// <remarks>
        /// Replace User / Sync User upsert a user in the system.
        /// <br/>If the user already exists, it will update the user with the new data.
        /// <br/>If the user does not exist, it will create a new user with the provided data.
        /// <br/>
        /// <br/>The user is identified by its key, and you can only create one user with the same key inside a Permit environment.
        /// <br/>A 200 status code will be returned if the user already exists, and a 201 status code will be returned if the user is created.
        /// </remarks>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>An existing user was replaced</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserRead> Replace_userAsync(string user_id, string proj_id, string env_id, UserCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/users/{user_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete User
        /// </summary>
        /// <remarks>
        /// Deletes the user and all its related data.
        /// </remarks>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_user(string user_id, string proj_id, string env_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_userAsync(user_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete User
        /// </summary>
        /// <remarks>
        /// Deletes the user and all its related data.
        /// </remarks>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_userAsync(string user_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/users/{user_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Partially updates the user definition.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual UserRead Update_user(string user_id, string proj_id, string env_id, UserUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_userAsync(user_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Partially updates the user definition.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserRead> Update_userAsync(string user_id, string proj_id, string env_id, UserUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/users/{user_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign Role To User
        /// </summary>
        /// <remarks>
        /// Assigns a role to the user within the tenant.
        /// <br/>
        /// <br/>The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
        /// </remarks>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleAssignmentRead Assign_role_to_user(string user_id, string proj_id, string env_id, UserRoleCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Assign_role_to_userAsync(user_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign Role To User
        /// </summary>
        /// <remarks>
        /// Assigns a role to the user within the tenant.
        /// <br/>
        /// <br/>The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
        /// </remarks>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleAssignmentRead> Assign_role_to_userAsync(string user_id, string proj_id, string env_id, UserRoleCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/users/{user_id}/roles"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleAssignmentRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Unassign Role From User
        /// </summary>
        /// <remarks>
        /// Unassigns the role from the user within the tenant.
        /// <br/>
        /// <br/>The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
        /// <br/>
        /// <br/>If the role is not actually assigned, will return 404.
        /// </remarks>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Unassign_role_from_user(string user_id, string proj_id, string env_id, UserRoleRemove body)
        {
            System.Threading.Tasks.Task.Run(async () => await Unassign_role_from_userAsync(user_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unassign Role From User
        /// </summary>
        /// <remarks>
        /// Unassigns the role from the user within the tenant.
        /// <br/>
        /// <br/>The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
        /// <br/>
        /// <br/>If the role is not actually assigned, will return 404.
        /// </remarks>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Unassign_role_from_userAsync(string user_id, string proj_id, string env_id, UserRoleRemove body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/users/{user_id}/roles"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Tenant Users
        /// </summary>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="search">Text search for the email field</param>
        /// <param name="role">Match users with a specific role</param>
        /// <param name="include_resource_instance_roles">Should add resource instance roles</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_UserRead_ List_tenant_users(string tenant_id, string proj_id, string env_id, string? search = null, string? role = null, bool? include_resource_instance_roles = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_tenant_usersAsync(tenant_id, proj_id, env_id, search, role, include_resource_instance_roles, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Tenant Users
        /// </summary>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="search">Text search for the email field</param>
        /// <param name="role">Match users with a specific role</param>
        /// <param name="include_resource_instance_roles">Should add resource instance roles</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_UserRead_> List_tenant_usersAsync(string tenant_id, string proj_id, string env_id, string? search = null, string? role = null, bool? include_resource_instance_roles = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (tenant_id == null)
                throw new System.ArgumentNullException("tenant_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}/users"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/tenants/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(tenant_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (role != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("role")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (include_resource_instance_roles != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("include_resource_instance_roles")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(include_resource_instance_roles, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_UserRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add User To Tenant
        /// </summary>
        /// <remarks>
        /// Create and add user to a tenant.
        /// </remarks>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual UserRead Add_user_to_tenant(string tenant_id, string proj_id, string env_id, UserCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Add_user_to_tenantAsync(tenant_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add User To Tenant
        /// </summary>
        /// <remarks>
        /// Create and add user to a tenant.
        /// </remarks>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserRead> Add_user_to_tenantAsync(string tenant_id, string proj_id, string env_id, UserCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (tenant_id == null)
                throw new System.ArgumentNullException("tenant_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}/users"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/tenants/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(tenant_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Tenants
        /// </summary>
        /// <remarks>
        /// Lists all the tenants defined within an env.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="search">Text search for the tenant name or key</param>
        /// <param name="include_total_count">Include total count in response</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_TenantRead_ List_tenants(string proj_id, string env_id, string? search = null, bool? include_total_count = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_tenantsAsync(proj_id, env_id, search, include_total_count, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Tenants
        /// </summary>
        /// <remarks>
        /// Lists all the tenants defined within an env.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="search">Text search for the tenant name or key</param>
        /// <param name="include_total_count">Include total count in response</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_TenantRead_> List_tenantsAsync(string proj_id, string env_id, string? search = null, bool? include_total_count = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/tenants"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/tenants");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (include_total_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("include_total_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(include_total_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_TenantRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Tenant
        /// </summary>
        /// <remarks>
        /// Creates a new tenant inside the Permit.io system.
        /// <br/>
        /// <br/>If the tenant is already created: will return 200 instead of 201,
        /// <br/>and will return the existing tenant object in the response body.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual TenantRead Create_tenant(string proj_id, string env_id, TenantCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_tenantAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Tenant
        /// </summary>
        /// <remarks>
        /// Creates a new tenant inside the Permit.io system.
        /// <br/>
        /// <br/>If the tenant is already created: will return 200 instead of 201,
        /// <br/>and will return the existing tenant object in the response body.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TenantRead> Create_tenantAsync(string proj_id, string env_id, TenantCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/tenants"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/tenants");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TenantRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Tenant
        /// </summary>
        /// <remarks>
        /// Gets a tenant, if such tenant exists. Otherwise returns 404.
        /// </remarks>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual TenantRead Get_tenant(string tenant_id, string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_tenantAsync(tenant_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Tenant
        /// </summary>
        /// <remarks>
        /// Gets a tenant, if such tenant exists. Otherwise returns 404.
        /// </remarks>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TenantRead> Get_tenantAsync(string tenant_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (tenant_id == null)
                throw new System.ArgumentNullException("tenant_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/tenants/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(tenant_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TenantRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Tenant
        /// </summary>
        /// <remarks>
        /// Deletes the tenant and all its related data.
        /// </remarks>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_tenant(string tenant_id, string proj_id, string env_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_tenantAsync(tenant_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Tenant
        /// </summary>
        /// <remarks>
        /// Deletes the tenant and all its related data.
        /// </remarks>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_tenantAsync(string tenant_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (tenant_id == null)
                throw new System.ArgumentNullException("tenant_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/tenants/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(tenant_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Tenant
        /// </summary>
        /// <remarks>
        /// Partially updates the tenant definition.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual TenantRead Update_tenant(string tenant_id, string proj_id, string env_id, TenantUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_tenantAsync(tenant_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Tenant
        /// </summary>
        /// <remarks>
        /// Partially updates the tenant definition.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TenantRead> Update_tenantAsync(string tenant_id, string proj_id, string env_id, TenantUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (tenant_id == null)
                throw new System.ArgumentNullException("tenant_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/tenants/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(tenant_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TenantRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Tenant User
        /// </summary>
        /// <remarks>
        /// Deletes a user under a tenant.
        /// </remarks>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_tenant_user(string tenant_id, string user_id, string proj_id, string env_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_tenant_userAsync(tenant_id, user_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Tenant User
        /// </summary>
        /// <remarks>
        /// Deletes a user under a tenant.
        /// </remarks>
        /// <param name="tenant_id">Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_tenant_userAsync(string tenant_id, string user_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (tenant_id == null)
                throw new System.ArgumentNullException("tenant_id");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}/users/{user_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/tenants/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(tenant_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Role Assignments
        /// </summary>
        /// <remarks>
        /// Lists the role assignments defined within an environment.
        /// <br/>
        /// <br/>- If the `user` filter is present, will only return the role assignments of that user (supports multiple).
        /// <br/>- If the `tenant` filter is present, will only return the role assignments in that tenant (supports multiple).
        /// <br/>- If the `role` filter is present, will only return role assignments that are granting that role (supports multiple).
        /// <br/>- If the `resource` filter is present, will only return role assignments for resource instances of that resource type.
        /// <br/>- If the `resource_instance` filter is present, will only return role assignments for that resource instance.
        /// <br/>
        /// <br/>Providing both `tenant` and `resource_instance` filters will only return role assignments if the resource instance is in that tenant.
        /// <br/>If multiple tenants are received, the last tenant will be compared with the resource instance.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user">optional user(s) filter, will only return role assignments granted to this user(s).</param>
        /// <param name="role">optional role(s) filter, will only return role assignments granting this role(s).</param>
        /// <param name="tenant">optional tenant(s) filter, will only return role assignments granted in that tenant(s).</param>
        /// <param name="resource">optional resource **type** filter, will only return role assignments granted on that resource type.</param>
        /// <param name="resource_instance">optional resource instance filter, will only return role assignments granted on that resource instance.</param>
        /// <param name="detailed">Whether to return full details about the user, tenant and role</param>
        /// <param name="include_total_count">If true, returns the list of role assignments and the total count.</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_RoleAssignmentRead_ List_role_assignments(string proj_id, string env_id, System.Collections.Generic.IEnumerable<string>? user = null, System.Collections.Generic.IEnumerable<string>? role = null, System.Collections.Generic.IEnumerable<string>? tenant = null, string? resource = null, string? resource_instance = null, bool? detailed = null, bool? include_total_count = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_role_assignmentsAsync(proj_id, env_id, user, role, tenant, resource, resource_instance, detailed, include_total_count, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Role Assignments
        /// </summary>
        /// <remarks>
        /// Lists the role assignments defined within an environment.
        /// <br/>
        /// <br/>- If the `user` filter is present, will only return the role assignments of that user (supports multiple).
        /// <br/>- If the `tenant` filter is present, will only return the role assignments in that tenant (supports multiple).
        /// <br/>- If the `role` filter is present, will only return role assignments that are granting that role (supports multiple).
        /// <br/>- If the `resource` filter is present, will only return role assignments for resource instances of that resource type.
        /// <br/>- If the `resource_instance` filter is present, will only return role assignments for that resource instance.
        /// <br/>
        /// <br/>Providing both `tenant` and `resource_instance` filters will only return role assignments if the resource instance is in that tenant.
        /// <br/>If multiple tenants are received, the last tenant will be compared with the resource instance.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user">optional user(s) filter, will only return role assignments granted to this user(s).</param>
        /// <param name="role">optional role(s) filter, will only return role assignments granting this role(s).</param>
        /// <param name="tenant">optional tenant(s) filter, will only return role assignments granted in that tenant(s).</param>
        /// <param name="resource">optional resource **type** filter, will only return role assignments granted on that resource type.</param>
        /// <param name="resource_instance">optional resource instance filter, will only return role assignments granted on that resource instance.</param>
        /// <param name="detailed">Whether to return full details about the user, tenant and role</param>
        /// <param name="include_total_count">If true, returns the list of role assignments and the total count.</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_RoleAssignmentRead_> List_role_assignmentsAsync(string proj_id, string env_id, System.Collections.Generic.IEnumerable<string>? user = null, System.Collections.Generic.IEnumerable<string>? role = null, System.Collections.Generic.IEnumerable<string>? tenant = null, string? resource = null, string? resource_instance = null, bool? detailed = null, bool? include_total_count = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/role_assignments"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role_assignments");
                    urlBuilder_.Append('?');
                    if (user != null)
                    {
                        foreach (var item_ in user) { urlBuilder_.Append(System.Uri.EscapeDataString("user")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (role != null)
                    {
                        foreach (var item_ in role) { urlBuilder_.Append(System.Uri.EscapeDataString("role")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tenant != null)
                    {
                        foreach (var item_ in tenant) { urlBuilder_.Append(System.Uri.EscapeDataString("tenant")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (resource != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (resource_instance != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource_instance")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource_instance, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (detailed != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("detailed")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(detailed, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (include_total_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("include_total_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(include_total_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_RoleAssignmentRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign Role
        /// </summary>
        /// <remarks>
        /// Assigns a role to a user within a tenant.
        /// <br/>
        /// <br/>The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleAssignmentRead Assign_role(string proj_id, string env_id, RoleAssignmentCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Assign_roleAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign Role
        /// </summary>
        /// <remarks>
        /// Assigns a role to a user within a tenant.
        /// <br/>
        /// <br/>The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleAssignmentRead> Assign_roleAsync(string proj_id, string env_id, RoleAssignmentCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/role_assignments"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role_assignments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleAssignmentRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Unassign Role
        /// </summary>
        /// <remarks>
        /// Unassigns a user role within a tenant.
        /// <br/>
        /// <br/>The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
        /// <br/>
        /// <br/>If the role is not actually assigned, will return 404.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Unassign_role(string proj_id, string env_id, RoleAssignmentRemove body)
        {
            System.Threading.Tasks.Task.Run(async () => await Unassign_roleAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unassign Role
        /// </summary>
        /// <remarks>
        /// Unassigns a user role within a tenant.
        /// <br/>
        /// <br/>The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
        /// <br/>
        /// <br/>If the role is not actually assigned, will return 404.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Unassign_roleAsync(string proj_id, string env_id, RoleAssignmentRemove body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/role_assignments"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role_assignments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Bulk create role assignments(EAP)
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="missing_user_policy">Policy for missing users - 'fail': Fail the entire operation if a user is missing; 'ignore': Skip assignments for missing users; 'create': Create missing users and continue with the operation</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual BulkRoleAssignmentReport Bulk_assign_role(string proj_id, string env_id, System.Collections.Generic.IEnumerable<RoleAssignmentCreate> body, MissingUserPolicy? missing_user_policy = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Bulk_assign_roleAsync(proj_id, env_id, body, missing_user_policy, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk create role assignments(EAP)
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="missing_user_policy">Policy for missing users - 'fail': Fail the entire operation if a user is missing; 'ignore': Skip assignments for missing users; 'create': Create missing users and continue with the operation</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkRoleAssignmentReport> Bulk_assign_roleAsync(string proj_id, string env_id, System.Collections.Generic.IEnumerable<RoleAssignmentCreate> body, MissingUserPolicy? missing_user_policy = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/role_assignments/bulk"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role_assignments/bulk");
                    urlBuilder_.Append('?');
                    if (missing_user_policy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("missing_user_policy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(missing_user_policy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkRoleAssignmentReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Bulk Unassign Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual BulkRoleUnAssignmentReport Bulk_unassign_role(string proj_id, string env_id, System.Collections.Generic.IEnumerable<RoleAssignmentRemove> body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Bulk_unassign_roleAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk Unassign Role
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkRoleUnAssignmentReport> Bulk_unassign_roleAsync(string proj_id, string env_id, System.Collections.Generic.IEnumerable<RoleAssignmentRemove> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/role_assignments/bulk"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/role_assignments/bulk");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkRoleUnAssignmentReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Set Permissions
        /// </summary>
        /// <remarks>
        /// Lists the condition set rules matching the filter.
        /// <br/>- If the `user_set` filter is present, will only return the permissions set of that user set.
        /// <br/>- If the `permission` filter is present, will only return the permissions sets that equals to the queried permission.
        /// <br/>- If the `resource_set` filter is present, will only return the permissions set of that resource set.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user_set">optional user set filter, will only return rules where the permission is granted to this user set</param>
        /// <param name="permission">optional permission filter, will only return condition set rules granting this permission</param>
        /// <param name="resource_set">optional resource set filter, will only return rules where the permission is granted on this resource set</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ConditionSetRuleRead> List_set_permissions(string proj_id, string env_id, string? user_set = null, string? permission = null, string? resource_set = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_set_permissionsAsync(proj_id, env_id, user_set, permission, resource_set, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Set Permissions
        /// </summary>
        /// <remarks>
        /// Lists the condition set rules matching the filter.
        /// <br/>- If the `user_set` filter is present, will only return the permissions set of that user set.
        /// <br/>- If the `permission` filter is present, will only return the permissions sets that equals to the queried permission.
        /// <br/>- If the `resource_set` filter is present, will only return the permissions set of that resource set.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="user_set">optional user set filter, will only return rules where the permission is granted to this user set</param>
        /// <param name="permission">optional permission filter, will only return condition set rules granting this permission</param>
        /// <param name="resource_set">optional resource set filter, will only return rules where the permission is granted on this resource set</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConditionSetRuleRead>> List_set_permissionsAsync(string proj_id, string env_id, string? user_set = null, string? permission = null, string? resource_set = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/set_rules"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/set_rules");
                    urlBuilder_.Append('?');
                    if (user_set != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("user_set")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(user_set, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (permission != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("permission")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(permission, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (resource_set != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource_set")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource_set, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ConditionSetRuleRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign Set Permissions
        /// </summary>
        /// <remarks>
        /// Grant permissions to a user set *on* a resource set.
        /// <br/>
        /// <br/>If the permission is already granted, it is skipped.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ConditionSetRuleRead> Assign_set_permissions(string proj_id, string env_id, ConditionSetRuleCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Assign_set_permissionsAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign Set Permissions
        /// </summary>
        /// <remarks>
        /// Grant permissions to a user set *on* a resource set.
        /// <br/>
        /// <br/>If the permission is already granted, it is skipped.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConditionSetRuleRead>> Assign_set_permissionsAsync(string proj_id, string env_id, ConditionSetRuleCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/set_rules"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/set_rules");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ConditionSetRuleRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Unassign Set Permissions
        /// </summary>
        /// <remarks>
        /// Revokes permissions to a user set *on* a resource set.
        /// <br/>
        /// <br/>If the permission is not granted, it is skipped.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Unassign_set_permissions(string proj_id, string env_id, ConditionSetRuleRemove body)
        {
            System.Threading.Tasks.Task.Run(async () => await Unassign_set_permissionsAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unassign Set Permissions
        /// </summary>
        /// <remarks>
        /// Revokes permissions to a user set *on* a resource set.
        /// <br/>
        /// <br/>If the permission is not granted, it is skipped.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Unassign_set_permissionsAsync(string proj_id, string env_id, ConditionSetRuleRemove body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/set_rules"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/set_rules");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Resource Instances
        /// </summary>
        /// <remarks>
        /// Lists all the resource instances defined within an environment.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="tenant">The tenant key or id to filter by</param>
        /// <param name="resource">The resource key or id to filter by</param>
        /// <param name="search">The resource instance key or id to filter by (supports multi-value like this url?search=key-1&amp;search=key-2)</param>
        /// <param name="detailed">If true, will return the relationships of the resource instance.</param>
        /// <param name="include_total_count">Include total count in response(will make the request slower)</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_ResourceInstanceRead_ List_resource_instances(string proj_id, string env_id, string? tenant = null, string? resource = null, System.Collections.Generic.IEnumerable<string>? search = null, bool? detailed = null, bool? include_total_count = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_resource_instancesAsync(proj_id, env_id, tenant, resource, search, detailed, include_total_count, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Resource Instances
        /// </summary>
        /// <remarks>
        /// Lists all the resource instances defined within an environment.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="tenant">The tenant key or id to filter by</param>
        /// <param name="resource">The resource key or id to filter by</param>
        /// <param name="search">The resource instance key or id to filter by (supports multi-value like this url?search=key-1&amp;search=key-2)</param>
        /// <param name="detailed">If true, will return the relationships of the resource instance.</param>
        /// <param name="include_total_count">Include total count in response(will make the request slower)</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_ResourceInstanceRead_> List_resource_instancesAsync(string proj_id, string env_id, string? tenant = null, string? resource = null, System.Collections.Generic.IEnumerable<string>? search = null, bool? detailed = null, bool? include_total_count = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/resource_instances"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resource_instances");
                    urlBuilder_.Append('?');
                    if (tenant != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tenant")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (resource != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        foreach (var item_ in search) { urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (detailed != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("detailed")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(detailed, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (include_total_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("include_total_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(include_total_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_ResourceInstanceRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Resource Instance
        /// </summary>
        /// <remarks>
        /// Creates a new instance inside the Permit.io system.
        /// <br/>
        /// <br/>If the instance is already created: will return 200 instead of 201,
        /// <br/>and will return the existing instance object in the response body.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceInstanceRead Create_resource_instance(string proj_id, string env_id, ResourceInstanceCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_resource_instanceAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Resource Instance
        /// </summary>
        /// <remarks>
        /// Creates a new instance inside the Permit.io system.
        /// <br/>
        /// <br/>If the instance is already created: will return 200 instead of 201,
        /// <br/>and will return the existing instance object in the response body.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceInstanceRead> Create_resource_instanceAsync(string proj_id, string env_id, ResourceInstanceCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/resource_instances"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resource_instances");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceInstanceRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Resource Instance
        /// </summary>
        /// <remarks>
        /// Gets a instance, if such instance exists. Otherwise returns 404.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="instance_id">f'Either the unique id of the resource instance, or the URL-friendly key of the &lt;resource_key:resource_instance_key&gt; (i.e: file:my_file.txt).'</param>
        /// <param name="detailed">If true, will return the relationships of the resource instance.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceInstanceRead Get_resource_instance(string proj_id, string env_id, string instance_id, bool? detailed = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_resource_instanceAsync(proj_id, env_id, instance_id, detailed, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Resource Instance
        /// </summary>
        /// <remarks>
        /// Gets a instance, if such instance exists. Otherwise returns 404.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="instance_id">f'Either the unique id of the resource instance, or the URL-friendly key of the &lt;resource_key:resource_instance_key&gt; (i.e: file:my_file.txt).'</param>
        /// <param name="detailed">If true, will return the relationships of the resource instance.</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceInstanceRead> Get_resource_instanceAsync(string proj_id, string env_id, string instance_id, bool? detailed = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (instance_id == null)
                throw new System.ArgumentNullException("instance_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resource_instances/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(instance_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (detailed != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("detailed")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(detailed, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceInstanceRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Resource Instance
        /// </summary>
        /// <remarks>
        /// Deletes the instance and all its related data.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="instance_id">f'Either the unique id of the resource instance, or the URL-friendly key of the &lt;resource_key:resource_instance_key&gt; (i.e: file:my_file.txt).'</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_resource_instance(string proj_id, string env_id, string instance_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_resource_instanceAsync(proj_id, env_id, instance_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Resource Instance
        /// </summary>
        /// <remarks>
        /// Deletes the instance and all its related data.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="instance_id">f'Either the unique id of the resource instance, or the URL-friendly key of the &lt;resource_key:resource_instance_key&gt; (i.e: file:my_file.txt).'</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_resource_instanceAsync(string proj_id, string env_id, string instance_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (instance_id == null)
                throw new System.ArgumentNullException("instance_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resource_instances/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(instance_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Resource Instance
        /// </summary>
        /// <remarks>
        /// Partially updates the instance definition.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="instance_id">f'Either the unique id of the resource instance, or the URL-friendly key of the &lt;resource_key:resource_instance_key&gt; (i.e: file:my_file.txt).'</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceInstanceRead Update_resource_instance(string proj_id, string env_id, string instance_id, ResourceInstanceUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_resource_instanceAsync(proj_id, env_id, instance_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Resource Instance
        /// </summary>
        /// <remarks>
        /// Partially updates the instance definition.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="instance_id">f'Either the unique id of the resource instance, or the URL-friendly key of the &lt;resource_key:resource_instance_key&gt; (i.e: file:my_file.txt).'</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceInstanceRead> Update_resource_instanceAsync(string proj_id, string env_id, string instance_id, ResourceInstanceUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (instance_id == null)
                throw new System.ArgumentNullException("instance_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resource_instances/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(instance_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceInstanceRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Proxy Configs
        /// </summary>
        /// <remarks>
        /// Lists all the proxy configs defined within an environment.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ProxyConfigRead> List_proxy_configs(string proj_id, string env_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_proxy_configsAsync(proj_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Proxy Configs
        /// </summary>
        /// <remarks>
        /// Lists all the proxy configs defined within an environment.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProxyConfigRead>> List_proxy_configsAsync(string proj_id, string env_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/proxy_configs"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/proxy_configs");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProxyConfigRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Proxy Config
        /// </summary>
        /// <remarks>
        /// Creates a new proxy config inside the Permit.io system.
        /// <br/>
        /// <br/>If the proxy config is already created: will return 200 instead of 201,
        /// <br/>and will return the existing proxy config object in the response body.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ProxyConfigRead Create_proxy_config(string proj_id, string env_id, ProxyConfigCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_proxy_configAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Proxy Config
        /// </summary>
        /// <remarks>
        /// Creates a new proxy config inside the Permit.io system.
        /// <br/>
        /// <br/>If the proxy config is already created: will return 200 instead of 201,
        /// <br/>and will return the existing proxy config object in the response body.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProxyConfigRead> Create_proxy_configAsync(string proj_id, string env_id, ProxyConfigCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/proxy_configs"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/proxy_configs");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProxyConfigRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Proxy Config
        /// </summary>
        /// <remarks>
        /// Gets a proxy config, if such proxy config exists. Otherwise returns 404.
        /// </remarks>
        /// <param name="proxy_config_id">Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ProxyConfigRead Get_proxy_config(string proxy_config_id, string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_proxy_configAsync(proxy_config_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Proxy Config
        /// </summary>
        /// <remarks>
        /// Gets a proxy config, if such proxy config exists. Otherwise returns 404.
        /// </remarks>
        /// <param name="proxy_config_id">Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProxyConfigRead> Get_proxy_configAsync(string proxy_config_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proxy_config_id == null)
                throw new System.ArgumentNullException("proxy_config_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/proxy_configs/{proxy_config_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/proxy_configs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proxy_config_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProxyConfigRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Proxy Config
        /// </summary>
        /// <remarks>
        /// Deletes the proxy config and all its related data.
        /// </remarks>
        /// <param name="proxy_config_id">Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_proxy_config(string proxy_config_id, string proj_id, string env_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_proxy_configAsync(proxy_config_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Proxy Config
        /// </summary>
        /// <remarks>
        /// Deletes the proxy config and all its related data.
        /// </remarks>
        /// <param name="proxy_config_id">Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_proxy_configAsync(string proxy_config_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proxy_config_id == null)
                throw new System.ArgumentNullException("proxy_config_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/proxy_configs/{proxy_config_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/proxy_configs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proxy_config_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Proxy Config
        /// </summary>
        /// <remarks>
        /// Partially updates the proxy config definition.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="proxy_config_id">Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ProxyConfigRead Update_proxy_config(string proxy_config_id, string proj_id, string env_id, ProxyConfigUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_proxy_configAsync(proxy_config_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Proxy Config
        /// </summary>
        /// <remarks>
        /// Partially updates the proxy config definition.
        /// <br/>Fields that will be provided will be completely overwritten.
        /// </remarks>
        /// <param name="proxy_config_id">Either the unique id of the proxy config, or the URL-friendly key of the proxy config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProxyConfigRead> Update_proxy_configAsync(string proxy_config_id, string proj_id, string env_id, ProxyConfigUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proxy_config_id == null)
                throw new System.ArgumentNullException("proxy_config_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/proxy_configs/{proxy_config_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/proxy_configs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proxy_config_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProxyConfigRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Bulk Replace Users
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual UserReplaceBulkOperationResult Bulk_replace_users(string proj_id, string env_id, UserReplaceBulkOperation body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Bulk_replace_usersAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk Replace Users
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserReplaceBulkOperationResult> Bulk_replace_usersAsync(string proj_id, string env_id, UserReplaceBulkOperation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/bulk/users"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/bulk/users");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserReplaceBulkOperationResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Bulk Create Users
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual UserCreateBulkOperationResult Bulk_create_users(string proj_id, string env_id, UserCreateBulkOperation body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Bulk_create_usersAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk Create Users
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserCreateBulkOperationResult> Bulk_create_usersAsync(string proj_id, string env_id, UserCreateBulkOperation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/bulk/users"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/bulk/users");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserCreateBulkOperationResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Bulk Delete Users
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual UserDeleteBulkOperationResult Bulk_delete_users(string proj_id, string env_id, UserDeleteBulkOperation body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Bulk_delete_usersAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk Delete Users
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserDeleteBulkOperationResult> Bulk_delete_usersAsync(string proj_id, string env_id, UserDeleteBulkOperation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/bulk/users"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/bulk/users");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserDeleteBulkOperationResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Bulk Create Tenants
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual TenantCreateBulkOperationResult Bulk_create_tenants(string proj_id, string env_id, TenantCreateBulkOperation body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Bulk_create_tenantsAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk Create Tenants
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TenantCreateBulkOperationResult> Bulk_create_tenantsAsync(string proj_id, string env_id, TenantCreateBulkOperation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/bulk/tenants"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/bulk/tenants");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TenantCreateBulkOperationResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Bulk Delete Tenants
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual TenantDeleteBulkOperationResult Bulk_delete_tenants(string proj_id, string env_id, TenantDeleteBulkOperation body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Bulk_delete_tenantsAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk Delete Tenants
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TenantDeleteBulkOperationResult> Bulk_delete_tenantsAsync(string proj_id, string env_id, TenantDeleteBulkOperation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/bulk/tenants"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/bulk/tenants");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TenantDeleteBulkOperationResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Bulk Replace Resource Instances
        /// </summary>
        /// <remarks>
        /// Creates or replaces Resource Instances.
        /// <br/>If a resource instance with `key` and `resource` already exists,
        /// <br/>it will be replaced.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceInstanceCreateBulkOperationResult Bulk_replace_resource_instances(string proj_id, string env_id, ResourceInstanceCreateBulkOperation body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Bulk_replace_resource_instancesAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk Replace Resource Instances
        /// </summary>
        /// <remarks>
        /// Creates or replaces Resource Instances.
        /// <br/>If a resource instance with `key` and `resource` already exists,
        /// <br/>it will be replaced.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceInstanceCreateBulkOperationResult> Bulk_replace_resource_instancesAsync(string proj_id, string env_id, ResourceInstanceCreateBulkOperation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/bulk/resource_instances"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/bulk/resource_instances");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceInstanceCreateBulkOperationResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Bulk Delete Resource Instances
        /// </summary>
        /// <remarks>
        /// Deletes many Resource Instances.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ResourceInstanceDeleteBulkOperationResult Bulk_delete_resource_instances(string proj_id, string env_id, ResourceInstanceDeleteBulkOperation body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Bulk_delete_resource_instancesAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk Delete Resource Instances
        /// </summary>
        /// <remarks>
        /// Deletes many Resource Instances.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceInstanceDeleteBulkOperationResult> Bulk_delete_resource_instancesAsync(string proj_id, string env_id, ResourceInstanceDeleteBulkOperation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/bulk/resource_instances"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/bulk/resource_instances");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceInstanceDeleteBulkOperationResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Email Configuration
        /// </summary>
        /// <remarks>
        /// Gets the email configuration defined within an environment.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual EmailConfigurationRead Get_email_configuration(string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_email_configurationAsync(proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Email Configuration
        /// </summary>
        /// <remarks>
        /// Gets the email configuration defined within an environment.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EmailConfigurationRead> Get_email_configurationAsync(string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/email_configurations"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/email_configurations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EmailConfigurationRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Or Update Email Configuration
        /// </summary>
        /// <remarks>
        /// Create new configuration or updates the email configuration
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual EmailConfigurationRead Create_or_update_email_configuration(string proj_id, string env_id, EmailConfigurationCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_or_update_email_configurationAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Or Update Email Configuration
        /// </summary>
        /// <remarks>
        /// Create new configuration or updates the email configuration
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EmailConfigurationRead> Create_or_update_email_configurationAsync(string proj_id, string env_id, EmailConfigurationCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/email_configurations"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/email_configurations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EmailConfigurationRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Send Test Email
        /// </summary>
        /// <remarks>
        /// Sends a test email to the email address defined in the user.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual object Send_test_email(string proj_id, string env_id, EmailConfigurationCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Send_test_emailAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send Test Email
        /// </summary>
        /// <remarks>
        /// Sends a test email to the email address defined in the user.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Send_test_emailAsync(string proj_id, string env_id, EmailConfigurationCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/email_configurations/send_test_email"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/email_configurations/send_test_email");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Templates
        /// </summary>
        /// <remarks>
        /// Lists all the email configurations defined within an environment.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<EmailTemplateRead> List_templates(string proj_id, string env_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_templatesAsync(proj_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Templates
        /// </summary>
        /// <remarks>
        /// Lists all the email configurations defined within an environment.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EmailTemplateRead>> List_templatesAsync(string proj_id, string env_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/email_templates/"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/email_templates/");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EmailTemplateRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Template By Type
        /// </summary>
        /// <remarks>
        /// Lists all the email configurations defined within an environment.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual EmailTemplateRead Get_template_by_type(EmailTemplateType template_type, string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_template_by_typeAsync(template_type, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Template By Type
        /// </summary>
        /// <remarks>
        /// Lists all the email configurations defined within an environment.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EmailTemplateRead> Get_template_by_typeAsync(EmailTemplateType template_type, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (template_type == null)
                throw new System.ArgumentNullException("template_type");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/email_templates/{template_type}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/email_templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(template_type, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EmailTemplateRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Template By Type
        /// </summary>
        /// <remarks>
        /// Updates an email template by a given type.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual EmailTemplateRead Update_template_by_type(EmailTemplateType template_type, string proj_id, string env_id, EmailTemplateUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_template_by_typeAsync(template_type, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Template By Type
        /// </summary>
        /// <remarks>
        /// Updates an email template by a given type.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EmailTemplateRead> Update_template_by_typeAsync(EmailTemplateType template_type, string proj_id, string env_id, EmailTemplateUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (template_type == null)
                throw new System.ArgumentNullException("template_type");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/email_templates/{template_type}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/email_templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(template_type, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EmailTemplateRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Send Test Email By Type
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual object Send_test_email_by_type(EmailTemplateType template_type, string proj_id, string env_id, EmailTemplateUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Send_test_email_by_typeAsync(template_type, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send Test Email By Type
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Send_test_email_by_typeAsync(EmailTemplateType template_type, string proj_id, string env_id, EmailTemplateUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (template_type == null)
                throw new System.ArgumentNullException("template_type");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/email_templates/{template_type}/send_test_email"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/email_templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(template_type, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/send_test_email");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Relationship Tuples
        /// </summary>
        /// <remarks>
        /// Lists the relationship tuples defined within an environment.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="detailed">If true, will return the full subject and object resource instances.</param>
        /// <param name="include_total_count">If true, returns the list of resource instances and the total count.</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <param name="tenant">The tenant key or id to filter by</param>
        /// <param name="subject">The subject to filter by, accepts either the resource instance id or resource_type:resource_instance</param>
        /// <param name="relation">The relation id or key to filter by</param>
        /// <param name="object">The object to filter by, accepts either the resource instance id or resource_type:resource_instance</param>
        /// <param name="object_type">The object type to filter by, accepts resource type id or key</param>
        /// <param name="subject_type">The subject type to filter by, accepts resource type id or key</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_RelationshipTupleRead_ List_relationship_tuples(string proj_id, string env_id, bool? detailed = null, bool? include_total_count = null, int? page = null, int? per_page = null, string? tenant = null, string? subject = null, string? relation = null, string? @object = null, string? object_type = null, string? subject_type = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_relationship_tuplesAsync(proj_id, env_id, detailed, include_total_count, page, per_page, tenant, subject, relation, @object, object_type, subject_type, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Relationship Tuples
        /// </summary>
        /// <remarks>
        /// Lists the relationship tuples defined within an environment.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="detailed">If true, will return the full subject and object resource instances.</param>
        /// <param name="include_total_count">If true, returns the list of resource instances and the total count.</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <param name="tenant">The tenant key or id to filter by</param>
        /// <param name="subject">The subject to filter by, accepts either the resource instance id or resource_type:resource_instance</param>
        /// <param name="relation">The relation id or key to filter by</param>
        /// <param name="object">The object to filter by, accepts either the resource instance id or resource_type:resource_instance</param>
        /// <param name="object_type">The object type to filter by, accepts resource type id or key</param>
        /// <param name="subject_type">The subject type to filter by, accepts resource type id or key</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_RelationshipTupleRead_> List_relationship_tuplesAsync(string proj_id, string env_id, bool? detailed = null, bool? include_total_count = null, int? page = null, int? per_page = null, string? tenant = null, string? subject = null, string? relation = null, string? @object = null, string? object_type = null, string? subject_type = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/relationship_tuples"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/relationship_tuples");
                    urlBuilder_.Append('?');
                    if (detailed != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("detailed")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(detailed, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (include_total_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("include_total_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(include_total_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tenant != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tenant")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (subject != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("subject")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subject, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (relation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("relation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(relation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (@object != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("object")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(@object, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (object_type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("object_type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(object_type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (subject_type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("subject_type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subject_type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_RelationshipTupleRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Relationship Tuple
        /// </summary>
        /// <remarks>
        /// Create a relationship between two resource instances using a relation.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RelationshipTupleRead Create_relationship_tuple(string proj_id, string env_id, RelationshipTupleCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_relationship_tupleAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Relationship Tuple
        /// </summary>
        /// <remarks>
        /// Create a relationship between two resource instances using a relation.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RelationshipTupleRead> Create_relationship_tupleAsync(string proj_id, string env_id, RelationshipTupleCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/relationship_tuples"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/relationship_tuples");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RelationshipTupleRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Relationship Tuple
        /// </summary>
        /// <remarks>
        /// Delete a relationship between two resource instances.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_relationship_tuple(string proj_id, string env_id, RelationshipTupleDelete body)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_relationship_tupleAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Relationship Tuple
        /// </summary>
        /// <remarks>
        /// Delete a relationship between two resource instances.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_relationship_tupleAsync(string proj_id, string env_id, RelationshipTupleDelete body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/relationship_tuples"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/relationship_tuples");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Bulk create relationship tuples(EAP)
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RelationshipTupleCreateBulkOperationResult Bulk_create_relationship_tuples(string proj_id, string env_id, RelationshipTupleCreateBulkOperation body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Bulk_create_relationship_tuplesAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk create relationship tuples(EAP)
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RelationshipTupleCreateBulkOperationResult> Bulk_create_relationship_tuplesAsync(string proj_id, string env_id, RelationshipTupleCreateBulkOperation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/relationship_tuples/bulk"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/relationship_tuples/bulk");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RelationshipTupleCreateBulkOperationResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Bulk Delete Relationship Tuples
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RelationshipTupleDeleteBulkOperationResult Bulk_delete_relationship_tuples(string proj_id, string env_id, RelationshipTupleDeleteBulkOperation body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Bulk_delete_relationship_tuplesAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk Delete Relationship Tuples
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RelationshipTupleDeleteBulkOperationResult> Bulk_delete_relationship_tuplesAsync(string proj_id, string env_id, RelationshipTupleDeleteBulkOperation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/relationship_tuples/bulk"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/relationship_tuples/bulk");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RelationshipTupleDeleteBulkOperationResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List User Invites
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="role">optional role filter, will only return invited users with this role.</param>
        /// <param name="tenant">optional tenant filter, will only return invited users in that tenant.</param>
        /// <param name="search">optional search, will only return invited users to that email, key or name.</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_ElementsUserInviteRead_ List_user_invites(string proj_id, string env_id, string? role = null, string? tenant = null, string? search = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_user_invitesAsync(proj_id, env_id, role, tenant, search, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List User Invites
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="role">optional role filter, will only return invited users with this role.</param>
        /// <param name="tenant">optional tenant filter, will only return invited users in that tenant.</param>
        /// <param name="search">optional search, will only return invited users to that email, key or name.</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_ElementsUserInviteRead_> List_user_invitesAsync(string proj_id, string env_id, string? role = null, string? tenant = null, string? search = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/user_invites"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/user_invites");
                    urlBuilder_.Append('?');
                    if (role != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("role")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tenant != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tenant")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_ElementsUserInviteRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create User Invite
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ElementsUserInviteRead Create_user_invite(string proj_id, string env_id, ElementsUserInviteCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_user_inviteAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create User Invite
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ElementsUserInviteRead> Create_user_inviteAsync(string proj_id, string env_id, ElementsUserInviteCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/user_invites"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/user_invites");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ElementsUserInviteRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get User Invite
        /// </summary>
        /// <param name="user_invite_id">Either the unique id of the user_invite, or the URL-friendly key of the user_invite (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ElementsUserInviteRead Get_user_invite(string user_invite_id, string proj_id, string env_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_user_inviteAsync(user_invite_id, proj_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get User Invite
        /// </summary>
        /// <param name="user_invite_id">Either the unique id of the user_invite, or the URL-friendly key of the user_invite (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ElementsUserInviteRead> Get_user_inviteAsync(string user_invite_id, string proj_id, string env_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (user_invite_id == null)
                throw new System.ArgumentNullException("user_invite_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/user_invites/{user_invite_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/user_invites/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_invite_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ElementsUserInviteRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete User Invite
        /// </summary>
        /// <param name="user_invite_id">Either the unique id of the user_invite, or the URL-friendly key of the user_invite (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_user_invite(string user_invite_id, string proj_id, string env_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_user_inviteAsync(user_invite_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete User Invite
        /// </summary>
        /// <param name="user_invite_id">Either the unique id of the user_invite, or the URL-friendly key of the user_invite (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_user_inviteAsync(string user_invite_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (user_invite_id == null)
                throw new System.ArgumentNullException("user_invite_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/user_invites/{user_invite_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/user_invites/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_invite_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update User Invite
        /// </summary>
        /// <param name="user_invite_id">Either the unique id of the user_invite, or the URL-friendly key of the user_invite (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ElementsUserInviteRead Update_user_invite(string user_invite_id, string proj_id, string env_id, ElementsUserInviteUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_user_inviteAsync(user_invite_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update User Invite
        /// </summary>
        /// <param name="user_invite_id">Either the unique id of the user_invite, or the URL-friendly key of the user_invite (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ElementsUserInviteRead> Update_user_inviteAsync(string user_invite_id, string proj_id, string env_id, ElementsUserInviteUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (user_invite_id == null)
                throw new System.ArgumentNullException("user_invite_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/user_invites/{user_invite_id}"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/user_invites/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_invite_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ElementsUserInviteRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Approve User Invite
        /// </summary>
        /// <param name="user_invite_id">Either the unique id of the user_invite, or the URL-friendly key of the user_invite (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual UserRead Approve_user_invite(string user_invite_id, string proj_id, string env_id, ElementsUserInviteApprove body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Approve_user_inviteAsync(user_invite_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve User Invite
        /// </summary>
        /// <param name="user_invite_id">Either the unique id of the user_invite, or the URL-friendly key of the user_invite (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserRead> Approve_user_inviteAsync(string user_invite_id, string proj_id, string env_id, ElementsUserInviteApprove body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (user_invite_id == null)
                throw new System.ArgumentNullException("user_invite_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/facts/{proj_id}/{env_id}/user_invites/{user_invite_id}/approve"
                    urlBuilder_.Append("v2/facts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/user_invites/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_invite_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/approve");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApproveMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<ApproveMessage>("The user already approved or the email requested doesn\'t match the email of the invite.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List PDP configurations
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<PDPConfigRead> List_pdp_configs(string proj_id, string env_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_pdp_configsAsync(proj_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List PDP configurations
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PDPConfigRead>> List_pdp_configsAsync(string proj_id, string env_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/pdps/{proj_id}/{env_id}/configs"
                    urlBuilder_.Append("v2/pdps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/configs");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PDPConfigRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get PDP configuration
        /// </summary>
        /// <remarks>
        /// Gets the configuration values for the PDP container with id `pdp_id`.
        /// <br/>
        /// <br/>The config values returned are considered "overrides", meaning they are overriding
        /// <br/>any default values given to the container by the user.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="pdp_id">The unique id of the pdp</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RemoteConfig Get_pdp_config_values(string proj_id, string env_id, System.Guid pdp_id, int? x_Shard_ID = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_pdp_config_valuesAsync(proj_id, env_id, pdp_id, x_Shard_ID, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get PDP configuration
        /// </summary>
        /// <remarks>
        /// Gets the configuration values for the PDP container with id `pdp_id`.
        /// <br/>
        /// <br/>The config values returned are considered "overrides", meaning they are overriding
        /// <br/>any default values given to the container by the user.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="pdp_id">The unique id of the pdp</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RemoteConfig> Get_pdp_config_valuesAsync(string proj_id, string env_id, System.Guid pdp_id, int? x_Shard_ID = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (pdp_id == null)
                throw new System.ArgumentNullException("pdp_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Shard_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Shard-ID", ConvertToString(x_Shard_ID, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/values"
                    urlBuilder_.Append("v2/pdps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/configs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(pdp_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/values");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RemoteConfig>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Enable debug audit logs
        /// </summary>
        /// <remarks>
        /// Enables debug audit logs for the PDP container with id `pdp_id`.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="pdp_id">The unique id of the pdp</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PDPConfigRead Enable_debug_audit_logs(string proj_id, string env_id, System.Guid pdp_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Enable_debug_audit_logsAsync(proj_id, env_id, pdp_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable debug audit logs
        /// </summary>
        /// <remarks>
        /// Enables debug audit logs for the PDP container with id `pdp_id`.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="pdp_id">The unique id of the pdp</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PDPConfigRead> Enable_debug_audit_logsAsync(string proj_id, string env_id, System.Guid pdp_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (pdp_id == null)
                throw new System.ArgumentNullException("pdp_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/debug-audit-logs/enable"
                    urlBuilder_.Append("v2/pdps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/configs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(pdp_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/debug-audit-logs/enable");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PDPConfigRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Disable debug audit logs
        /// </summary>
        /// <remarks>
        /// Disabled debug audit logs for the PDP container with id `pdp_id`.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="pdp_id">The unique id of the pdp</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PDPConfigRead Disable_debug_audit_logs(string proj_id, string env_id, System.Guid pdp_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Disable_debug_audit_logsAsync(proj_id, env_id, pdp_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Disable debug audit logs
        /// </summary>
        /// <remarks>
        /// Disabled debug audit logs for the PDP container with id `pdp_id`.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="pdp_id">The unique id of the pdp</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PDPConfigRead> Disable_debug_audit_logsAsync(string proj_id, string env_id, System.Guid pdp_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (pdp_id == null)
                throw new System.ArgumentNullException("pdp_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/debug-audit-logs/disable"
                    urlBuilder_.Append("v2/pdps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/configs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(pdp_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/debug-audit-logs/disable");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PDPConfigRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Rotate PDP API Key
        /// </summary>
        /// <remarks>
        /// Rotates the API key of the PDP container with id `pdp_id`.
        /// <br/>
        /// <br/>The rotation of the API key revokes the old API key and issues a new API key to the PDP.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="pdp_id">The unique id of the pdp</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PDPConfigRead Rotate_pdp_api_key(string proj_id, string env_id, System.Guid pdp_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Rotate_pdp_api_keyAsync(proj_id, env_id, pdp_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Rotate PDP API Key
        /// </summary>
        /// <remarks>
        /// Rotates the API key of the PDP container with id `pdp_id`.
        /// <br/>
        /// <br/>The rotation of the API key revokes the old API key and issues a new API key to the PDP.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="pdp_id">The unique id of the pdp</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PDPConfigRead> Rotate_pdp_api_keyAsync(string proj_id, string env_id, System.Guid pdp_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (pdp_id == null)
                throw new System.ArgumentNullException("pdp_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/rotate-api-key"
                    urlBuilder_.Append("v2/pdps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/configs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(pdp_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/rotate-api-key");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PDPConfigRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Migrate PDP Config number of shards
        /// </summary>
        /// <remarks>
        /// The migration process is as followed:
        /// <br/>1. Perform request to this endpoint with the new number of shards
        /// <br/>2. A new PDP Config will be created with the new number of shards and a new api-key
        /// <br/>3. Create a new PDP cluster with the same instances as the number of shards defined in the new PDP Config
        /// <br/>4. Wait for the new PDP cluster to be ready
        /// <br/>5. Update your PDP load balancer to point to the new PDP cluster
        /// <br/>
        /// <br/>More info can be found here https://docs.permit.io/concepts/pdp-sharding
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PDPConfigRead Migrate_shards(string proj_id, string env_id, PDPShardMigration body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Migrate_shardsAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Migrate PDP Config number of shards
        /// </summary>
        /// <remarks>
        /// The migration process is as followed:
        /// <br/>1. Perform request to this endpoint with the new number of shards
        /// <br/>2. A new PDP Config will be created with the new number of shards and a new api-key
        /// <br/>3. Create a new PDP cluster with the same instances as the number of shards defined in the new PDP Config
        /// <br/>4. Wait for the new PDP cluster to be ready
        /// <br/>5. Update your PDP load balancer to point to the new PDP cluster
        /// <br/>
        /// <br/>More info can be found here https://docs.permit.io/concepts/pdp-sharding
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PDPConfigRead> Migrate_shardsAsync(string proj_id, string env_id, PDPShardMigration body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/pdps/{proj_id}/{env_id}/configs/migrate-shards"
                    urlBuilder_.Append("v2/pdps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/configs/migrate-shards");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PDPConfigRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Audit Logs
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="pdp_id">Filter by pdp config id</param>
        /// <param name="users">List of user keys or emails to filter by</param>
        /// <param name="decision">Filter by decision result</param>
        /// <param name="resources">Filter by resources</param>
        /// <param name="tenant">Filter by tenant</param>
        /// <param name="action">Filter by action</param>
        /// <param name="timestamp_from">Filter by timestamp from</param>
        /// <param name="timestamp_to">Filter by timestamp to</param>
        /// <param name="sort_by">Sort by column</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual LimitedPaginatedResult_AuditLogModel_ List_audit_logs(string proj_id, string env_id, System.Guid? pdp_id = null, System.Collections.Generic.IEnumerable<string>? users = null, bool? decision = null, System.Collections.Generic.IEnumerable<string>? resources = null, string? tenant = null, string? action = null, int? timestamp_from = null, int? timestamp_to = null, AuditLogSortKey? sort_by = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_audit_logsAsync(proj_id, env_id, pdp_id, users, decision, resources, tenant, action, timestamp_from, timestamp_to, sort_by, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Audit Logs
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="pdp_id">Filter by pdp config id</param>
        /// <param name="users">List of user keys or emails to filter by</param>
        /// <param name="decision">Filter by decision result</param>
        /// <param name="resources">Filter by resources</param>
        /// <param name="tenant">Filter by tenant</param>
        /// <param name="action">Filter by action</param>
        /// <param name="timestamp_from">Filter by timestamp from</param>
        /// <param name="timestamp_to">Filter by timestamp to</param>
        /// <param name="sort_by">Sort by column</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LimitedPaginatedResult_AuditLogModel_> List_audit_logsAsync(string proj_id, string env_id, System.Guid? pdp_id = null, System.Collections.Generic.IEnumerable<string>? users = null, bool? decision = null, System.Collections.Generic.IEnumerable<string>? resources = null, string? tenant = null, string? action = null, int? timestamp_from = null, int? timestamp_to = null, AuditLogSortKey? sort_by = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/pdps/{proj_id}/{env_id}/audit_logs"
                    urlBuilder_.Append("v2/pdps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/audit_logs");
                    urlBuilder_.Append('?');
                    if (pdp_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pdp_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pdp_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (users != null)
                    {
                        foreach (var item_ in users) { urlBuilder_.Append(System.Uri.EscapeDataString("users")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (decision != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("decision")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(decision, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (resources != null)
                    {
                        foreach (var item_ in resources) { urlBuilder_.Append(System.Uri.EscapeDataString("resources")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tenant != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tenant")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (action != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("action")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(action, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (timestamp_from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timestamp_from")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timestamp_from, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (timestamp_to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timestamp_to")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timestamp_to, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort_by != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sort_by")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sort_by, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LimitedPaginatedResult_AuditLogModel_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("Overreach of pagination limits", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get detailed audit log
        /// </summary>
        /// <param name="log_id">The unique id of the audit log</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual DetailedAuditLogModel Get_detailed_audit_log(System.Guid log_id, string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_detailed_audit_logAsync(log_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get detailed audit log
        /// </summary>
        /// <param name="log_id">The unique id of the audit log</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DetailedAuditLogModel> Get_detailed_audit_logAsync(System.Guid log_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (log_id == null)
                throw new System.ArgumentNullException("log_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/pdps/{proj_id}/{env_id}/audit_logs/{log_id}"
                    urlBuilder_.Append("v2/pdps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/audit_logs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(log_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DetailedAuditLogModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Policy Repos
        /// </summary>
        /// <remarks>
        /// Lists all the policy repositories under a given project.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<PolicyRepoRead> List_policy_repos(string proj_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_policy_reposAsync(proj_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Policy Repos
        /// </summary>
        /// <remarks>
        /// Lists all the policy repositories under a given project.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PolicyRepoRead>> List_policy_reposAsync(string proj_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/repos"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/repos");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PolicyRepoRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Policy Repo
        /// </summary>
        /// <remarks>
        /// Creates a new policy repository configuration under a given project.
        /// <br/>The given repository is created with status 'pending', it will be changed and used as the 'active' repository for
        /// <br/>the policy only after a successful attempt to use it.
        /// <br/>The repository main branch must be present in the remote.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PolicyRepoRead Create_policy_repo(string proj_id, PolicyRepoCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_policy_repoAsync(proj_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Policy Repo
        /// </summary>
        /// <remarks>
        /// Creates a new policy repository configuration under a given project.
        /// <br/>The given repository is created with status 'pending', it will be changed and used as the 'active' repository for
        /// <br/>the policy only after a successful attempt to use it.
        /// <br/>The repository main branch must be present in the remote.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PolicyRepoRead> Create_policy_repoAsync(string proj_id, PolicyRepoCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/repos"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/repos");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PolicyRepoRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Active Policy Repo
        /// </summary>
        /// <remarks>
        /// Gets the currently active repository, if such repository exists.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PolicyRepoRead Get_active_policy_repo(string proj_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_active_policy_repoAsync(proj_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Active Policy Repo
        /// </summary>
        /// <remarks>
        /// Gets the currently active repository, if such repository exists.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PolicyRepoRead> Get_active_policy_repoAsync(string proj_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/repos/active"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/repos/active");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PolicyRepoRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Disable Active Policy Repo
        /// </summary>
        /// <remarks>
        /// Disable the currently active policy repo, this action means to turn off the gitops feature.
        /// <br/>If there is no active policy repo, this action will do nothing.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ProjectRead Disable_active_policy_repo(string proj_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Disable_active_policy_repoAsync(proj_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Disable Active Policy Repo
        /// </summary>
        /// <remarks>
        /// Disable the currently active policy repo, this action means to turn off the gitops feature.
        /// <br/>If there is no active policy repo, this action will do nothing.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectRead> Disable_active_policy_repoAsync(string proj_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/repos/disable"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/repos/disable");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Activate Policy Repo
        /// </summary>
        /// <remarks>
        /// Disable the currently active policy repo, this action means to turn off the gitops feature.
        /// <br/>If there is no active policy repo, this action will do nothing.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="repo_id">Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ProjectRead Activate_policy_repo(string proj_id, string repo_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Activate_policy_repoAsync(proj_id, repo_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Activate Policy Repo
        /// </summary>
        /// <remarks>
        /// Disable the currently active policy repo, this action means to turn off the gitops feature.
        /// <br/>If there is no active policy repo, this action will do nothing.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="repo_id">Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectRead> Activate_policy_repoAsync(string proj_id, string repo_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (repo_id == null)
                throw new System.ArgumentNullException("repo_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/repos/{repo_id}/activate"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/repos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(repo_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/activate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("Invalid policy repo status", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Policy Repo
        /// </summary>
        /// <remarks>
        /// Gets a single repository matching the given repo_id, if such repository exists.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="repo_id">Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PolicyRepoRead Get_policy_repo(string proj_id, string repo_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_policy_repoAsync(proj_id, repo_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Policy Repo
        /// </summary>
        /// <remarks>
        /// Gets a single repository matching the given repo_id, if such repository exists.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="repo_id">Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PolicyRepoRead> Get_policy_repoAsync(string proj_id, string repo_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (repo_id == null)
                throw new System.ArgumentNullException("repo_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/repos/{repo_id}"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/repos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(repo_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PolicyRepoRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Policy Repo
        /// </summary>
        /// <remarks>
        /// Deletes an environment and all its related data.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="repo_id">Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_policy_repo(string proj_id, string repo_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_policy_repoAsync(proj_id, repo_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Policy Repo
        /// </summary>
        /// <remarks>
        /// Deletes an environment and all its related data.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="repo_id">Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_policy_repoAsync(string proj_id, string repo_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (repo_id == null)
                throw new System.ArgumentNullException("repo_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/repos/{repo_id}"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/repos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(repo_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Elements Configs
        /// </summary>
        /// <remarks>
        /// Lists all the elements_configs under the active organization.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_ElementsConfigRead_ List_elements_configs(string proj_id, string env_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_elements_configsAsync(proj_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Elements Configs
        /// </summary>
        /// <remarks>
        /// Lists all the elements_configs under the active organization.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_ElementsConfigRead_> List_elements_configsAsync(string proj_id, string env_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_ElementsConfigRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Elements Config
        /// </summary>
        /// <remarks>
        /// Creates a new elements_config under the active organization.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ElementsConfigRead Create_elements_config(string proj_id, string env_id, ElementsConfigCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_elements_configAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Elements Config
        /// </summary>
        /// <remarks>
        /// Creates a new elements_config under the active organization.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ElementsConfigRead> Create_elements_configAsync(string proj_id, string env_id, ElementsConfigCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ElementsConfigRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Elements Config
        /// </summary>
        /// <remarks>
        /// Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ElementsConfigRead Get_elements_config(string elements_config_id, string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_elements_configAsync(elements_config_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Elements Config
        /// </summary>
        /// <remarks>
        /// Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ElementsConfigRead> Get_elements_configAsync(string elements_config_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ElementsConfigRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Elements Config
        /// </summary>
        /// <remarks>
        /// Updates the elements_config.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ElementsConfigRead Update_elements_config(string elements_config_id, string proj_id, string env_id, ElementsConfigUpdate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_elements_configAsync(elements_config_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Elements Config
        /// </summary>
        /// <remarks>
        /// Updates the elements_config.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ElementsConfigRead> Update_elements_configAsync(string elements_config_id, string proj_id, string env_id, ElementsConfigUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ElementsConfigRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Elements Config Runtime
        /// </summary>
        /// <remarks>
        /// Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_instance_id">For ReBAC Elements, the resource instance ID or key to work on</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ElementsConfigRuntimeRead Get_elements_config_runtime(string elements_config_id, string proj_id, string env_id, string? resource_instance_id = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_elements_config_runtimeAsync(elements_config_id, proj_id, env_id, resource_instance_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Elements Config Runtime
        /// </summary>
        /// <remarks>
        /// Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_instance_id">For ReBAC Elements, the resource instance ID or key to work on</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ElementsConfigRuntimeRead> Get_elements_config_runtimeAsync(string elements_config_id, string proj_id, string env_id, string? resource_instance_id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/runtime"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/runtime");
                    urlBuilder_.Append('?');
                    if (resource_instance_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource_instance_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource_instance_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ElementsConfigRuntimeRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Elements Config
        /// </summary>
        /// <remarks>
        /// Deletes the elements_config and all its related data.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Delete_elements_config(string elements_config_id, string proj_id, string env_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Delete_elements_configAsync(elements_config_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Elements Config
        /// </summary>
        /// <remarks>
        /// Deletes the elements_config and all its related data.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Delete_elements_configAsync(string elements_config_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/{elements_config_id}"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// Lists all the users defined within an environment.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="search">Text search for the email field</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <param name="resource_instance_id">For ReBAC Elements, the resource instance ID or key to work on</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_UserRead_ Elements_list_users(string elements_config_id, string proj_id, string env_id, string? search = null, int? page = null, int? per_page = null, string? resource_instance_id = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Elements_list_usersAsync(elements_config_id, proj_id, env_id, search, page, per_page, resource_instance_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// Lists all the users defined within an environment.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="search">Text search for the email field</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <param name="resource_instance_id">For ReBAC Elements, the resource instance ID or key to work on</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_UserRead_> Elements_list_usersAsync(string elements_config_id, string proj_id, string env_id, string? search = null, int? page = null, int? per_page = null, string? resource_instance_id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/data/users");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (resource_instance_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource_instance_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource_instance_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_UserRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>
        /// Creates a new user inside the Permit.io system, from that point forward
        /// <br/>you may run permission checks on that user.
        /// <br/>
        /// <br/>If the user is already created: will return 200 instead of 201,
        /// <br/>and will return the existing user object in the response body.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_instance_id">For ReBAC Elements, the resource instance ID or key to work on</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual object Elements_create_user(string elements_config_id, string proj_id, string env_id, ElementsUserCreate body, string? resource_instance_id = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Elements_create_userAsync(elements_config_id, proj_id, env_id, body, resource_instance_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>
        /// Creates a new user inside the Permit.io system, from that point forward
        /// <br/>you may run permission checks on that user.
        /// <br/>
        /// <br/>If the user is already created: will return 200 instead of 201,
        /// <br/>and will return the existing user object in the response body.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_instance_id">For ReBAC Elements, the resource instance ID or key to work on</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Elements_create_userAsync(string elements_config_id, string proj_id, string env_id, ElementsUserCreate body, string? resource_instance_id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/data/users");
                    urlBuilder_.Append('?');
                    if (resource_instance_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource_instance_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource_instance_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete user
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="resource_instance_id">For ReBAC Elements, the resource instance ID or key to work on</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Elements_delete_user(string proj_id, string env_id, string elements_config_id, string user_id, string? resource_instance_id = null)
        {
            System.Threading.Tasks.Task.Run(async () => await Elements_delete_userAsync(proj_id, env_id, elements_config_id, user_id, resource_instance_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete user
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="resource_instance_id">For ReBAC Elements, the resource instance ID or key to work on</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Elements_delete_userAsync(string proj_id, string env_id, string elements_config_id, string user_id, string? resource_instance_id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/data/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (resource_instance_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource_instance_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource_instance_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// Lists all the users defined within an environment.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="search">Text search for the email field</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <param name="resource_instance_id">For ReBAC Elements, the resource instance ID or key to work on</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.ICollection<ElementsRoleRead> Elements_list_roles(string elements_config_id, string proj_id, string env_id, string? search = null, int? page = null, int? per_page = null, string? resource_instance_id = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Elements_list_rolesAsync(elements_config_id, proj_id, env_id, search, page, per_page, resource_instance_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// Lists all the users defined within an environment.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="search">Text search for the email field</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <param name="resource_instance_id">For ReBAC Elements, the resource instance ID or key to work on</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ElementsRoleRead>> Elements_list_rolesAsync(string elements_config_id, string proj_id, string env_id, string? search = null, int? page = null, int? per_page = null, string? resource_instance_id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/roles"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/data/roles");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (resource_instance_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource_instance_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource_instance_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ElementsRoleRead>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign role to user
        /// </summary>
        /// <remarks>
        /// Assigns a role to the user within the tenant.
        /// <br/>
        /// <br/>The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_instance_id">For ReBAC Elements, the resource instance ID or key to work on</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual RoleAssignmentRead Elements_assign_role_to_user(string elements_config_id, string user_id, string proj_id, string env_id, ElementsUserRoleCreate body, string? resource_instance_id = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Elements_assign_role_to_userAsync(elements_config_id, user_id, proj_id, env_id, body, resource_instance_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign role to user
        /// </summary>
        /// <remarks>
        /// Assigns a role to the user within the tenant.
        /// <br/>
        /// <br/>The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_instance_id">For ReBAC Elements, the resource instance ID or key to work on</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleAssignmentRead> Elements_assign_role_to_userAsync(string elements_config_id, string user_id, string proj_id, string env_id, ElementsUserRoleCreate body, string? resource_instance_id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}/roles"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/data/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles");
                    urlBuilder_.Append('?');
                    if (resource_instance_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource_instance_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource_instance_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleAssignmentRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Unassign role from user
        /// </summary>
        /// <remarks>
        /// Unassigns the role from the user within the tenant.
        /// <br/>
        /// <br/>The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
        /// <br/>
        /// <br/>If the role is not actually assigned, will return 404.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_instance_id">For ReBAC Elements, the resource instance ID or key to work on</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Elements_unassign_role_from_user(string elements_config_id, string user_id, string proj_id, string env_id, ElementsUserRoleRemove body, string? resource_instance_id = null)
        {
            System.Threading.Tasks.Task.Run(async () => await Elements_unassign_role_from_userAsync(elements_config_id, user_id, proj_id, env_id, body, resource_instance_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unassign role from user
        /// </summary>
        /// <remarks>
        /// Unassigns the role from the user within the tenant.
        /// <br/>
        /// <br/>The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
        /// <br/>
        /// <br/>If the role is not actually assigned, will return 404.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="user_id">Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="resource_instance_id">For ReBAC Elements, the resource instance ID or key to work on</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Elements_unassign_role_from_userAsync(string elements_config_id, string user_id, string proj_id, string env_id, ElementsUserRoleRemove body, string? resource_instance_id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}/roles"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/data/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles");
                    urlBuilder_.Append('?');
                    if (resource_instance_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource_instance_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource_instance_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Set Config Active
        /// </summary>
        /// <remarks>
        /// Updates the embed_config.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Set_config_active(string elements_config_id, string proj_id, string env_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Set_config_activeAsync(elements_config_id, proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set Config Active
        /// </summary>
        /// <remarks>
        /// Updates the embed_config.
        /// </remarks>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Set_config_activeAsync(string elements_config_id, string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/active"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/data/active");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List audit logs
        /// </summary>
        /// <remarks>
        /// Lists audit logs for for specific elements config (tenant scope)
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="search">Text search for the email field</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual LimitedPaginatedResult_AuditLogModel_ Elements_list_audit_logs(string proj_id, string env_id, string elements_config_id, string? search = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Elements_list_audit_logsAsync(proj_id, env_id, elements_config_id, search, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List audit logs
        /// </summary>
        /// <remarks>
        /// Lists audit logs for for specific elements config (tenant scope)
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="search">Text search for the email field</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LimitedPaginatedResult_AuditLogModel_> Elements_list_audit_logsAsync(string proj_id, string env_id, string elements_config_id, string? search = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/audit_logs"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/data/audit_logs");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LimitedPaginatedResult_AuditLogModel_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Access Requests
        /// </summary>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="status">Optional status filter, will only return access requests with this status.</param>
        /// <param name="tenant">Optional tenant filter, will only return access request granted in that tenant.</param>
        /// <param name="role">Optional role filter, will only return access request granted with that role.</param>
        /// <param name="resource">Optional resource filter, will only return access request granted in that resource.</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <param name="resource_instance_id">For ReBAC Elements, the resource instance ID or key to work on</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_AccessRequestRead_ List_access_requests(string elements_config_id, string proj_id, string env_id, RequestStatus? status = null, string? tenant = null, string? role = null, string? resource = null, int? page = null, int? per_page = null, string? resource_instance_id = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_access_requestsAsync(elements_config_id, proj_id, env_id, status, tenant, role, resource, page, per_page, resource_instance_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Access Requests
        /// </summary>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="status">Optional status filter, will only return access requests with this status.</param>
        /// <param name="tenant">Optional tenant filter, will only return access request granted in that tenant.</param>
        /// <param name="role">Optional role filter, will only return access request granted with that role.</param>
        /// <param name="resource">Optional resource filter, will only return access request granted in that resource.</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <param name="resource_instance_id">For ReBAC Elements, the resource instance ID or key to work on</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_AccessRequestRead_> List_access_requestsAsync(string elements_config_id, string proj_id, string env_id, RequestStatus? status = null, string? tenant = null, string? role = null, string? resource = null, int? page = null, int? per_page = null, string? resource_instance_id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/access_requests");
                    urlBuilder_.Append('?');
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tenant != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tenant")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (role != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("role")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (resource != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (resource_instance_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource_instance_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource_instance_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_AccessRequestRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Access Request
        /// </summary>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual AccessRequestRead Create_access_request(string elements_config_id, string proj_id, string env_id, AccessRequestUserCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_access_requestAsync(elements_config_id, proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Access Request
        /// </summary>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccessRequestRead> Create_access_requestAsync(string elements_config_id, string proj_id, string env_id, AccessRequestUserCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/access_requests");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessRequestRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Access Request
        /// </summary>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="access_request_id">Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual AccessRequestRead Get_access_request(string elements_config_id, string access_request_id, string proj_id, string env_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_access_requestAsync(elements_config_id, access_request_id, proj_id, env_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Access Request
        /// </summary>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="access_request_id">Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccessRequestRead> Get_access_requestAsync(string elements_config_id, string access_request_id, string proj_id, string env_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (access_request_id == null)
                throw new System.ArgumentNullException("access_request_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/access_requests/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(access_request_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessRequestRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Access Request Reviewer
        /// </summary>
        /// <param name="access_request_id">Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual AccessRequestRead Update_access_request_reviewer(string access_request_id, string proj_id, string env_id, string elements_config_id, AccessRequestReview body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_access_request_reviewerAsync(access_request_id, proj_id, env_id, elements_config_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Access Request Reviewer
        /// </summary>
        /// <param name="access_request_id">Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccessRequestRead> Update_access_request_reviewerAsync(string access_request_id, string proj_id, string env_id, string elements_config_id, AccessRequestReview body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (access_request_id == null)
                throw new System.ArgumentNullException("access_request_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}/reviewer"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/access_requests/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(access_request_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/reviewer");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessRequestRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Approve Access Request
        /// </summary>
        /// <param name="access_request_id">Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual AccessRequestApproved Approve_access_request(System.Guid access_request_id, string proj_id, string env_id, string elements_config_id, AccessRequestReview body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Approve_access_requestAsync(access_request_id, proj_id, env_id, elements_config_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve Access Request
        /// </summary>
        /// <param name="access_request_id">Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccessRequestApproved> Approve_access_requestAsync(System.Guid access_request_id, string proj_id, string env_id, string elements_config_id, AccessRequestReview body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (access_request_id == null)
                throw new System.ArgumentNullException("access_request_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}/approve"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/access_requests/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(access_request_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/approve");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessRequestApproved>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deny Access Request
        /// </summary>
        /// <param name="access_request_id">Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual AccessRequestDenied Deny_access_request(string access_request_id, string proj_id, string env_id, string elements_config_id, AccessRequestReviewDeny body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Deny_access_requestAsync(access_request_id, proj_id, env_id, elements_config_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deny Access Request
        /// </summary>
        /// <param name="access_request_id">Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccessRequestDenied> Deny_access_requestAsync(string access_request_id, string proj_id, string env_id, string elements_config_id, AccessRequestReviewDeny body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (access_request_id == null)
                throw new System.ArgumentNullException("access_request_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}/deny"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/access_requests/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(access_request_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/deny");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessRequestDenied>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel Access Request
        /// </summary>
        /// <param name="access_request_id">Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual AccessRequestCanceled Cancel_access_request(string access_request_id, string proj_id, string env_id, string elements_config_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Cancel_access_requestAsync(access_request_id, proj_id, env_id, elements_config_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel Access Request
        /// </summary>
        /// <param name="access_request_id">Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccessRequestCanceled> Cancel_access_requestAsync(string access_request_id, string proj_id, string env_id, string elements_config_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (access_request_id == null)
                throw new System.ArgumentNullException("access_request_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}/cancel"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/access_requests/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(access_request_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/cancel");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessRequestCanceled>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Operation Approvals
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="status">Optional status filter, will only return access requests with this status.</param>
        /// <param name="resource">Optional resource filter, will only return access request granted in that resource.</param>
        /// <param name="resource_instance">Optional resource instance filter, will only return access request granted in that resource instance.</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual PaginatedResult_OperationApprovalList_ List_operation_approvals(string proj_id, string env_id, string elements_config_id, RequestStatus? status = null, string? resource = null, string? resource_instance = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_operation_approvalsAsync(proj_id, env_id, elements_config_id, status, resource, resource_instance, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Operation Approvals
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="status">Optional status filter, will only return access requests with this status.</param>
        /// <param name="resource">Optional resource filter, will only return access request granted in that resource.</param>
        /// <param name="resource_instance">Optional resource instance filter, will only return access request granted in that resource instance.</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedResult_OperationApprovalList_> List_operation_approvalsAsync(string proj_id, string env_id, string elements_config_id, RequestStatus? status = null, string? resource = null, string? resource_instance = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operation_approval");
                    urlBuilder_.Append('?');
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (resource != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (resource_instance != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("resource_instance")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(resource_instance, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_OperationApprovalList_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Operation Approval
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OperationApprovalRead Create_operation_approval(string proj_id, string env_id, string elements_config_id, OperationApprovalUserCreate body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Create_operation_approvalAsync(proj_id, env_id, elements_config_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Operation Approval
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OperationApprovalRead> Create_operation_approvalAsync(string proj_id, string env_id, string elements_config_id, OperationApprovalUserCreate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operation_approval");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationApprovalRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Operation Approval
        /// </summary>
        /// <param name="operation_approval_id">Either the unique id of the operation_approval, or the URL-friendly key of the operation_approval (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OperationApprovalRead Get_operation_approval(string operation_approval_id, string proj_id, string env_id, string elements_config_id, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_operation_approvalAsync(operation_approval_id, proj_id, env_id, elements_config_id, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Operation Approval
        /// </summary>
        /// <param name="operation_approval_id">Either the unique id of the operation_approval, or the URL-friendly key of the operation_approval (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OperationApprovalRead> Get_operation_approvalAsync(string operation_approval_id, string proj_id, string env_id, string elements_config_id, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (operation_approval_id == null)
                throw new System.ArgumentNullException("operation_approval_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval/{operation_approval_id}"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operation_approval/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operation_approval_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationApprovalRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Operation Approval Reviewer
        /// </summary>
        /// <param name="operation_approval_id">Either the unique id of the operation_approval, or the URL-friendly key of the operation_approval (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OperationApprovalRead Update_operation_approval_reviewer(string operation_approval_id, string proj_id, string env_id, string elements_config_id, OperationApprovalReview body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Update_operation_approval_reviewerAsync(operation_approval_id, proj_id, env_id, elements_config_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Operation Approval Reviewer
        /// </summary>
        /// <param name="operation_approval_id">Either the unique id of the operation_approval, or the URL-friendly key of the operation_approval (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OperationApprovalRead> Update_operation_approval_reviewerAsync(string operation_approval_id, string proj_id, string env_id, string elements_config_id, OperationApprovalReview body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (operation_approval_id == null)
                throw new System.ArgumentNullException("operation_approval_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval/{operation_approval_id}/reviewer"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operation_approval/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operation_approval_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/reviewer");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationApprovalRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Approve Operation Approval
        /// </summary>
        /// <param name="operation_approval_id">Either the unique id of the operation_approval, or the URL-friendly key of the operation_approval (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OperationApprovalApproved Approve_operation_approval(string operation_approval_id, string proj_id, string env_id, string elements_config_id, OperationApprovalReview body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Approve_operation_approvalAsync(operation_approval_id, proj_id, env_id, elements_config_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve Operation Approval
        /// </summary>
        /// <param name="operation_approval_id">Either the unique id of the operation_approval, or the URL-friendly key of the operation_approval (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OperationApprovalApproved> Approve_operation_approvalAsync(string operation_approval_id, string proj_id, string env_id, string elements_config_id, OperationApprovalReview body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (operation_approval_id == null)
                throw new System.ArgumentNullException("operation_approval_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval/{operation_approval_id}/approve"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operation_approval/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operation_approval_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/approve");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationApprovalApproved>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deny Operation Approval
        /// </summary>
        /// <param name="operation_approval_id">Either the unique id of the operation_approval, or the URL-friendly key of the operation_approval (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OperationApprovalDenied Deny_operation_approval(string operation_approval_id, string proj_id, string env_id, string elements_config_id, OperationApprovalReview body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Deny_operation_approvalAsync(operation_approval_id, proj_id, env_id, elements_config_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deny Operation Approval
        /// </summary>
        /// <param name="operation_approval_id">Either the unique id of the operation_approval, or the URL-friendly key of the operation_approval (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OperationApprovalDenied> Deny_operation_approvalAsync(string operation_approval_id, string proj_id, string env_id, string elements_config_id, OperationApprovalReview body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (operation_approval_id == null)
                throw new System.ArgumentNullException("operation_approval_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval/{operation_approval_id}/deny"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operation_approval/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operation_approval_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/deny");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationApprovalDenied>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel Operation Approval
        /// </summary>
        /// <param name="operation_approval_id">Either the unique id of the operation_approval, or the URL-friendly key of the operation_approval (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual OperationApprovalCanceled Cancel_operation_approval(string operation_approval_id, string proj_id, string env_id, string elements_config_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Cancel_operation_approvalAsync(operation_approval_id, proj_id, env_id, elements_config_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel Operation Approval
        /// </summary>
        /// <param name="operation_approval_id">Either the unique id of the operation_approval, or the URL-friendly key of the operation_approval (i.e: the "slug").</param>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <param name="elements_config_id">Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OperationApprovalCanceled> Cancel_operation_approvalAsync(string operation_approval_id, string proj_id, string env_id, string elements_config_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (operation_approval_id == null)
                throw new System.ArgumentNullException("operation_approval_id");

            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (elements_config_id == null)
                throw new System.ArgumentNullException("elements_config_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/operation_approval/{operation_approval_id}/cancel"
                    urlBuilder_.Append("v2/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elements_config_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operation_approval/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operation_approval_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/cancel");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationApprovalCanceled>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Api Events
        /// </summary>
        /// <remarks>
        /// Fetches all API History events for given filters.
        /// </remarks>
        /// <param name="method">HTTP methods to include in search</param>
        /// <param name="path">API paths to include in search</param>
        /// <param name="success">Filter by API request success/failure</param>
        /// <param name="status_code">HTTP status codes to include in search</param>
        /// <param name="client_ip">IPs of clients to include in search</param>
        /// <param name="actor_type">Actor type to search (member, user, api_key)</param>
        /// <param name="actor_id">Actor ID to search</param>
        /// <param name="actor_display_name">Actor display name to search</param>
        /// <param name="project_id">Projects to include in search</param>
        /// <param name="env_id">Environments to include in search</param>
        /// <param name="timestamp_from">Retrieve only events after this timestamp (seconds since epoch)</param>
        /// <param name="timestamp_until">Retrieve only events before this timestamp (seconds since epoch)</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual PaginatedResult_APIHistoryEventRead_ List_api_events(System.Collections.Generic.IEnumerable<string>? method = null, System.Collections.Generic.IEnumerable<string>? path = null, bool? success = null, System.Collections.Generic.IEnumerable<int>? status_code = null, System.Collections.Generic.IEnumerable<string>? client_ip = null, System.Collections.Generic.IEnumerable<string>? actor_type = null, System.Collections.Generic.IEnumerable<string>? actor_id = null, string? actor_display_name = null, System.Collections.Generic.IEnumerable<string>? project_id = null, System.Collections.Generic.IEnumerable<string>? env_id = null, int? timestamp_from = null, int? timestamp_until = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_api_eventsAsync(method, path, success, status_code, client_ip, actor_type, actor_id, actor_display_name, project_id, env_id, timestamp_from, timestamp_until, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Api Events
        /// </summary>
        /// <remarks>
        /// Fetches all API History events for given filters.
        /// </remarks>
        /// <param name="method">HTTP methods to include in search</param>
        /// <param name="path">API paths to include in search</param>
        /// <param name="success">Filter by API request success/failure</param>
        /// <param name="status_code">HTTP status codes to include in search</param>
        /// <param name="client_ip">IPs of clients to include in search</param>
        /// <param name="actor_type">Actor type to search (member, user, api_key)</param>
        /// <param name="actor_id">Actor ID to search</param>
        /// <param name="actor_display_name">Actor display name to search</param>
        /// <param name="project_id">Projects to include in search</param>
        /// <param name="env_id">Environments to include in search</param>
        /// <param name="timestamp_from">Retrieve only events after this timestamp (seconds since epoch)</param>
        /// <param name="timestamp_until">Retrieve only events before this timestamp (seconds since epoch)</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<PaginatedResult_APIHistoryEventRead_> List_api_eventsAsync(System.Collections.Generic.IEnumerable<string>? method = null, System.Collections.Generic.IEnumerable<string>? path = null, bool? success = null, System.Collections.Generic.IEnumerable<int>? status_code = null, System.Collections.Generic.IEnumerable<string>? client_ip = null, System.Collections.Generic.IEnumerable<string>? actor_type = null, System.Collections.Generic.IEnumerable<string>? actor_id = null, string? actor_display_name = null, System.Collections.Generic.IEnumerable<string>? project_id = null, System.Collections.Generic.IEnumerable<string>? env_id = null, int? timestamp_from = null, int? timestamp_until = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/deprecated/history"
                    urlBuilder_.Append("v2/deprecated/history");
                    urlBuilder_.Append('?');
                    if (method != null)
                    {
                        foreach (var item_ in method) { urlBuilder_.Append(System.Uri.EscapeDataString("method")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (path != null)
                    {
                        foreach (var item_ in path) { urlBuilder_.Append(System.Uri.EscapeDataString("path")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (success != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("success")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(success, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (status_code != null)
                    {
                        foreach (var item_ in status_code) { urlBuilder_.Append(System.Uri.EscapeDataString("status_code")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (client_ip != null)
                    {
                        foreach (var item_ in client_ip) { urlBuilder_.Append(System.Uri.EscapeDataString("client_ip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (actor_type != null)
                    {
                        foreach (var item_ in actor_type) { urlBuilder_.Append(System.Uri.EscapeDataString("actor_type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (actor_id != null)
                    {
                        foreach (var item_ in actor_id) { urlBuilder_.Append(System.Uri.EscapeDataString("actor_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (actor_display_name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("actor_display_name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(actor_display_name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (project_id != null)
                    {
                        foreach (var item_ in project_id) { urlBuilder_.Append(System.Uri.EscapeDataString("project_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (env_id != null)
                    {
                        foreach (var item_ in env_id) { urlBuilder_.Append(System.Uri.EscapeDataString("env_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (timestamp_from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timestamp_from")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timestamp_from, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (timestamp_until != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timestamp_until")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timestamp_until, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_APIHistoryEventRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Api Event
        /// </summary>
        /// <remarks>
        /// Returns full information, including request and response bodies, for one event.
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual APIHistoryEventFullRead Get_api_event(System.Guid event_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_api_eventAsync(event_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Api Event
        /// </summary>
        /// <remarks>
        /// Returns full information, including request and response bodies, for one event.
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<APIHistoryEventFullRead> Get_api_eventAsync(System.Guid event_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/deprecated/history/{event_id}"
                    urlBuilder_.Append("v2/deprecated/history/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<APIHistoryEventFullRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Request Body
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual FileResponse Get_request_body(System.Guid event_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_request_bodyAsync(event_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Request Body
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<FileResponse> Get_request_bodyAsync(System.Guid event_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/deprecated/history/{event_id}/request"
                    urlBuilder_.Append("v2/deprecated/history/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/request");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Response Body
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual FileResponse Get_response_body(System.Guid event_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_response_bodyAsync(event_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Response Body
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<FileResponse> Get_response_bodyAsync(System.Guid event_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/deprecated/history/{event_id}/response"
                    urlBuilder_.Append("v2/deprecated/history/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/response");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Api Events
        /// </summary>
        /// <remarks>
        /// Fetches all API History events for given filters.
        /// <br/>Available to members with Viewer (or higher) role.
        /// </remarks>
        /// <param name="method">HTTP methods to include in search</param>
        /// <param name="path">API paths to include in search</param>
        /// <param name="success">Filter by API request success/failure</param>
        /// <param name="status_code">HTTP status codes to include in search</param>
        /// <param name="client_ip">IPs of clients to include in search</param>
        /// <param name="actor_type">Actor type to search (member, user, api_key)</param>
        /// <param name="actor_id">Actor ID to search</param>
        /// <param name="actor_display_name">Actor display name to search</param>
        /// <param name="project_id">Projects to include in search</param>
        /// <param name="env_id">Environments to include in search</param>
        /// <param name="timestamp_from">Retrieve only events after this timestamp (seconds since epoch)</param>
        /// <param name="timestamp_until">Retrieve only events before this timestamp (seconds since epoch)</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual LimitedPaginatedResult_APIHistoryEventRead_ List_api_events_v2_history_get(System.Collections.Generic.IEnumerable<string>? method = null, System.Collections.Generic.IEnumerable<string>? path = null, bool? success = null, System.Collections.Generic.IEnumerable<int>? status_code = null, System.Collections.Generic.IEnumerable<string>? client_ip = null, System.Collections.Generic.IEnumerable<string>? actor_type = null, System.Collections.Generic.IEnumerable<string>? actor_id = null, string? actor_display_name = null, System.Collections.Generic.IEnumerable<string>? project_id = null, System.Collections.Generic.IEnumerable<string>? env_id = null, int? timestamp_from = null, int? timestamp_until = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_api_events_v2_history_getAsync(method, path, success, status_code, client_ip, actor_type, actor_id, actor_display_name, project_id, env_id, timestamp_from, timestamp_until, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Api Events
        /// </summary>
        /// <remarks>
        /// Fetches all API History events for given filters.
        /// <br/>Available to members with Viewer (or higher) role.
        /// </remarks>
        /// <param name="method">HTTP methods to include in search</param>
        /// <param name="path">API paths to include in search</param>
        /// <param name="success">Filter by API request success/failure</param>
        /// <param name="status_code">HTTP status codes to include in search</param>
        /// <param name="client_ip">IPs of clients to include in search</param>
        /// <param name="actor_type">Actor type to search (member, user, api_key)</param>
        /// <param name="actor_id">Actor ID to search</param>
        /// <param name="actor_display_name">Actor display name to search</param>
        /// <param name="project_id">Projects to include in search</param>
        /// <param name="env_id">Environments to include in search</param>
        /// <param name="timestamp_from">Retrieve only events after this timestamp (seconds since epoch)</param>
        /// <param name="timestamp_until">Retrieve only events before this timestamp (seconds since epoch)</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LimitedPaginatedResult_APIHistoryEventRead_> List_api_events_v2_history_getAsync(System.Collections.Generic.IEnumerable<string>? method = null, System.Collections.Generic.IEnumerable<string>? path = null, bool? success = null, System.Collections.Generic.IEnumerable<int>? status_code = null, System.Collections.Generic.IEnumerable<string>? client_ip = null, System.Collections.Generic.IEnumerable<string>? actor_type = null, System.Collections.Generic.IEnumerable<string>? actor_id = null, string? actor_display_name = null, System.Collections.Generic.IEnumerable<string>? project_id = null, System.Collections.Generic.IEnumerable<string>? env_id = null, int? timestamp_from = null, int? timestamp_until = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/history"
                    urlBuilder_.Append("v2/history");
                    urlBuilder_.Append('?');
                    if (method != null)
                    {
                        foreach (var item_ in method) { urlBuilder_.Append(System.Uri.EscapeDataString("method")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (path != null)
                    {
                        foreach (var item_ in path) { urlBuilder_.Append(System.Uri.EscapeDataString("path")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (success != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("success")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(success, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (status_code != null)
                    {
                        foreach (var item_ in status_code) { urlBuilder_.Append(System.Uri.EscapeDataString("status_code")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (client_ip != null)
                    {
                        foreach (var item_ in client_ip) { urlBuilder_.Append(System.Uri.EscapeDataString("client_ip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (actor_type != null)
                    {
                        foreach (var item_ in actor_type) { urlBuilder_.Append(System.Uri.EscapeDataString("actor_type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (actor_id != null)
                    {
                        foreach (var item_ in actor_id) { urlBuilder_.Append(System.Uri.EscapeDataString("actor_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (actor_display_name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("actor_display_name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(actor_display_name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (project_id != null)
                    {
                        foreach (var item_ in project_id) { urlBuilder_.Append(System.Uri.EscapeDataString("project_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (env_id != null)
                    {
                        foreach (var item_ in env_id) { urlBuilder_.Append(System.Uri.EscapeDataString("env_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (timestamp_from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timestamp_from")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timestamp_from, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (timestamp_until != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timestamp_until")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timestamp_until, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LimitedPaginatedResult_APIHistoryEventRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Api Event
        /// </summary>
        /// <remarks>
        /// Returns full information, including request and response bodies, for one event.
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual APIHistoryEventFullRead Get_api_event_v2_history__event_id__get(System.Guid event_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_api_event_v2_history__event_id__getAsync(event_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Api Event
        /// </summary>
        /// <remarks>
        /// Returns full information, including request and response bodies, for one event.
        /// </remarks>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<APIHistoryEventFullRead> Get_api_event_v2_history__event_id__getAsync(System.Guid event_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/history/{event_id}"
                    urlBuilder_.Append("v2/history/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<APIHistoryEventFullRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Request Body
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual FileResponse Get_request_body_v2_history__event_id__request_get(System.Guid event_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_request_body_v2_history__event_id__request_getAsync(event_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Request Body
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> Get_request_body_v2_history__event_id__request_getAsync(System.Guid event_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/history/{event_id}/request"
                    urlBuilder_.Append("v2/history/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/request");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Response Body
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual FileResponse Get_response_body_v2_history__event_id__response_get(System.Guid event_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_response_body_v2_history__event_id__response_getAsync(event_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Response Body
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> Get_response_body_v2_history__event_id__response_getAsync(System.Guid event_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (event_id == null)
                throw new System.ArgumentNullException("event_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/history/{event_id}/response"
                    urlBuilder_.Append("v2/history/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(event_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/response");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Activity Events
        /// </summary>
        /// <remarks>
        /// Fetches all API History events for given filters.
        /// <br/>Available to members with Viewer (or higher) role.
        /// </remarks>
        /// <param name="actor_id">Actor ID to search</param>
        /// <param name="actor_display_name">Actor display name to search</param>
        /// <param name="actor_type">Actor type to search (member, user, api_key)</param>
        /// <param name="project_id">Projects to include in search</param>
        /// <param name="env_id">Environments to include in search</param>
        /// <param name="timestamp_from">Retrieve only events after this timestamp (seconds since epoch)</param>
        /// <param name="timestamp_until">Retrieve only events before this timestamp (seconds since epoch)</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual LimitedPaginatedResult_ActivityLogEventRead_ List_activity_events(System.Collections.Generic.IEnumerable<string>? actor_id = null, string? actor_display_name = null, System.Collections.Generic.IEnumerable<string>? actor_type = null, System.Collections.Generic.IEnumerable<string>? project_id = null, System.Collections.Generic.IEnumerable<string>? env_id = null, int? timestamp_from = null, int? timestamp_until = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_activity_eventsAsync(actor_id, actor_display_name, actor_type, project_id, env_id, timestamp_from, timestamp_until, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Activity Events
        /// </summary>
        /// <remarks>
        /// Fetches all API History events for given filters.
        /// <br/>Available to members with Viewer (or higher) role.
        /// </remarks>
        /// <param name="actor_id">Actor ID to search</param>
        /// <param name="actor_display_name">Actor display name to search</param>
        /// <param name="actor_type">Actor type to search (member, user, api_key)</param>
        /// <param name="project_id">Projects to include in search</param>
        /// <param name="env_id">Environments to include in search</param>
        /// <param name="timestamp_from">Retrieve only events after this timestamp (seconds since epoch)</param>
        /// <param name="timestamp_until">Retrieve only events before this timestamp (seconds since epoch)</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LimitedPaginatedResult_ActivityLogEventRead_> List_activity_eventsAsync(System.Collections.Generic.IEnumerable<string>? actor_id = null, string? actor_display_name = null, System.Collections.Generic.IEnumerable<string>? actor_type = null, System.Collections.Generic.IEnumerable<string>? project_id = null, System.Collections.Generic.IEnumerable<string>? env_id = null, int? timestamp_from = null, int? timestamp_until = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/activity"
                    urlBuilder_.Append("v2/activity");
                    urlBuilder_.Append('?');
                    if (actor_id != null)
                    {
                        foreach (var item_ in actor_id) { urlBuilder_.Append(System.Uri.EscapeDataString("actor_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (actor_display_name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("actor_display_name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(actor_display_name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (actor_type != null)
                    {
                        foreach (var item_ in actor_type) { urlBuilder_.Append(System.Uri.EscapeDataString("actor_type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (project_id != null)
                    {
                        foreach (var item_ in project_id) { urlBuilder_.Append(System.Uri.EscapeDataString("project_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (env_id != null)
                    {
                        foreach (var item_ in env_id) { urlBuilder_.Append(System.Uri.EscapeDataString("env_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (timestamp_from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timestamp_from")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timestamp_from, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (timestamp_until != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timestamp_until")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timestamp_until, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LimitedPaginatedResult_ActivityLogEventRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Activity Types
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual object List_activity_types()
        {
            return System.Threading.Tasks.Task.Run(async () => await List_activity_typesAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Activity Types
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> List_activity_typesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/activity/types"
                    urlBuilder_.Append("v2/activity/types");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Activity Events
        /// </summary>
        /// <remarks>
        /// Fetches all API History events for given filters.
        /// </remarks>
        /// <param name="actor_id">Actor ID to search</param>
        /// <param name="actor_display_name">Actor display name to search</param>
        /// <param name="actor_type">Actor type to search (member, user, api_key)</param>
        /// <param name="project_id">Projects to include in search</param>
        /// <param name="env_id">Environments to include in search</param>
        /// <param name="timestamp_from">Retrieve only events after this timestamp (seconds since epoch)</param>
        /// <param name="timestamp_until">Retrieve only events before this timestamp (seconds since epoch)</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual PaginatedResult_ActivityLogEventRead_ List_activity_events_v2_deprecated_activity_get(System.Collections.Generic.IEnumerable<string>? actor_id = null, string? actor_display_name = null, System.Collections.Generic.IEnumerable<string>? actor_type = null, System.Collections.Generic.IEnumerable<string>? project_id = null, System.Collections.Generic.IEnumerable<string>? env_id = null, int? timestamp_from = null, int? timestamp_until = null, int? page = null, int? per_page = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await List_activity_events_v2_deprecated_activity_getAsync(actor_id, actor_display_name, actor_type, project_id, env_id, timestamp_from, timestamp_until, page, per_page, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Activity Events
        /// </summary>
        /// <remarks>
        /// Fetches all API History events for given filters.
        /// </remarks>
        /// <param name="actor_id">Actor ID to search</param>
        /// <param name="actor_display_name">Actor display name to search</param>
        /// <param name="actor_type">Actor type to search (member, user, api_key)</param>
        /// <param name="project_id">Projects to include in search</param>
        /// <param name="env_id">Environments to include in search</param>
        /// <param name="timestamp_from">Retrieve only events after this timestamp (seconds since epoch)</param>
        /// <param name="timestamp_until">Retrieve only events before this timestamp (seconds since epoch)</param>
        /// <param name="page">Page number of the results to fetch, starting at 1.</param>
        /// <param name="per_page">The number of results per page (max 100).</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<PaginatedResult_ActivityLogEventRead_> List_activity_events_v2_deprecated_activity_getAsync(System.Collections.Generic.IEnumerable<string>? actor_id = null, string? actor_display_name = null, System.Collections.Generic.IEnumerable<string>? actor_type = null, System.Collections.Generic.IEnumerable<string>? project_id = null, System.Collections.Generic.IEnumerable<string>? env_id = null, int? timestamp_from = null, int? timestamp_until = null, int? page = null, int? per_page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/deprecated/activity"
                    urlBuilder_.Append("v2/deprecated/activity");
                    urlBuilder_.Append('?');
                    if (actor_id != null)
                    {
                        foreach (var item_ in actor_id) { urlBuilder_.Append(System.Uri.EscapeDataString("actor_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (actor_display_name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("actor_display_name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(actor_display_name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (actor_type != null)
                    {
                        foreach (var item_ in actor_type) { urlBuilder_.Append(System.Uri.EscapeDataString("actor_type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (project_id != null)
                    {
                        foreach (var item_ in project_id) { urlBuilder_.Append(System.Uri.EscapeDataString("project_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (env_id != null)
                    {
                        foreach (var item_ in env_id) { urlBuilder_.Append(System.Uri.EscapeDataString("env_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (timestamp_from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timestamp_from")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timestamp_from, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (timestamp_until != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("timestamp_until")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timestamp_until, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedResult_ActivityLogEventRead_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Activity Types
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual object List_activity_types_v2_deprecated_activity_types_get()
        {
            return System.Threading.Tasks.Task.Run(async () => await List_activity_types_v2_deprecated_activity_types_getAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Activity Types
        /// </summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<object> List_activity_types_v2_deprecated_activity_types_getAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/deprecated/activity/types"
                    urlBuilder_.Append("v2/deprecated/activity/types");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Scope Config
        /// </summary>
        /// <remarks>
        /// Returns the custom OPAL Scope config for given environment, if exists.
        /// <br/>If not custom config is set, return 404.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ScopeConfigRead Get_scope_config(string proj_id, string env_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await Get_scope_configAsync(proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Scope Config
        /// </summary>
        /// <remarks>
        /// Returns the custom OPAL Scope config for given environment, if exists.
        /// <br/>If not custom config is set, return 404.
        /// </remarks>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ScopeConfigRead> Get_scope_configAsync(string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/{env_id}/opal_scope"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/opal_scope");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScopeConfigRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Set Scope Config
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual ScopeConfigRead Set_scope_config(string proj_id, string env_id, ScopeConfigSet body)
        {
            return System.Threading.Tasks.Task.Run(async () => await Set_scope_configAsync(proj_id, env_id, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set Scope Config
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ScopeConfigRead> Set_scope_configAsync(string proj_id, string env_id, ScopeConfigSet body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/{env_id}/opal_scope"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/opal_scope");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ >= 200 && status_ < 300)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScopeConfigRead>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Reset Scope Config
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual void Reset_scope_config(string proj_id, string env_id)
        {
            System.Threading.Tasks.Task.Run(async () => await Reset_scope_configAsync(proj_id, env_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reset Scope Config
        /// </summary>
        /// <param name="proj_id">Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").</param>
        /// <param name="env_id">Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="PermitApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Reset_scope_configAsync(string proj_id, string env_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (proj_id == null)
                throw new System.ArgumentNullException("proj_id");

            if (env_id == null)
                throw new System.ArgumentNullException("env_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/projects/{proj_id}/{env_id}/opal_scope"
                    urlBuilder_.Append("v2/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(proj_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(env_id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/opal_scope");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HTTPValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PermitApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PermitApiException<HTTPValidationError>("Validation Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PermitApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new PermitApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new PermitApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625